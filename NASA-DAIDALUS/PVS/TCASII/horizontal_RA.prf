(horizontal_RA
 (horizontal_RA_TCC1 0
  (horizontal_RA_TCC1-1 nil 3598212509 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (horizontal_RA_at_rewrite 0
  (horizontal_RA_at_rewrite-1 nil 3598212554
   ("" (skosimp*)
    (("" (assert)
      (("" (case "(so!1 - si!1) * (vo!1 - vi!1) >= 0")
        (("1" (assert)
          (("1" (expand "horizontal_RA_at")
            (("1" (expand "horizontal_RA")
              (("1" (expand "tau_current")
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (ground)
                      (("1" (lemma "sq_le")
                        (("1" (inst?)
                          (("1" (rewrite "sq_norm")
                            (("1" (assert)
                              (("1"
                                (hide-all-but (-1 1))
                                (("1" (grind :exclude "sqv") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "sqrt_le")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (rewrite "sqrt_sqv_norm")
                              (("2"
                                (hide-all-but (-1 1))
                                (("2" (grind :exclude "norm") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (lemma "sq_le")
                        (("3" (inst?)
                          (("3" (rewrite "sq_norm")
                            (("3" (assert)
                              (("3"
                                (hide-all-but (-1 1))
                                (("3" (grind :exclude "sqv") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (typepred "sqv(vo!1-vi!1)")
                        (("4" (mult-by -1 "t!1")
                          (("4" (hide (-2 1)) (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("5" (typepred "sqv(vo!1-vi!1)")
                        (("5" (mult-by -1 "t!1")
                          (("5" (hide (-2 1)) (("5" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2"
            (case "sqv(so!1 - si!1 + t!1 * (vo!1 - vi!1)) <= sq(DMOD)")
            (("1" (assert)
              (("1" (expand "horizontal_RA_at")
                (("1" (expand "horizontal_RA")
                  (("1" (assert)
                    (("1"
                      (case "norm(so!1 + t!1 * vo!1 - (si!1 + t!1 * vi!1)) <= DMOD")
                      (("1" (assert) nil nil)
                       ("2" (hide 3)
                        (("2" (lemma "sq_le")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (rewrite "sq_norm")
                                (("2"
                                  (hide (2 3))
                                  (("2"
                                    (grind :exclude "sqv")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "horizontal_RA_at")
                (("2" (expand "horizontal_RA")
                  (("2" (expand "tau_current")
                    (("2" (assert)
                      (("2"
                        (case "norm(so!1 + t!1 * vo!1 - (si!1 + t!1 * vi!1)) > DMOD")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (ground)
                                (("1"
                                  (invoke (case "%1 = 0") (! -3 1 3))
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (mult-by -1 "TAU")
                                    (("2"
                                      (mult-by -2 "TAU")
                                      (("2"
                                        (hide-all-but (-1 -2 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 2))
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (cross-mult -1)
                                  (("3"
                                    (hide-all-but (-1 1))
                                    (("3"
                                      (grind :exclude "sqv")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (cross-mult 1)
                                  (("4"
                                    (hide-all-but (-2 1))
                                    (("4"
                                      (grind :exclude "sqv")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (lemma "sq_gt")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "sq_norm")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (grind :exclude ("sqv" "norm"))
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (dot_scal_left formula-decl nil vectors_2D "vectors/")
    (sq_gt formula-decl nil sq "reals/")
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TAU formal-const-decl "nnreal" horizontal_RA nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_RA const-decl "bool" horizontal_RA nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (DMOD formal-const-decl "posreal" horizontal_RA nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (sq_le formula-decl nil sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sqrt_sqv_norm formula-decl nil vectors_2D "vectors/")
    (sqrt_sq formula-decl nil sqrt "reals/")
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (sqrt_le formula-decl nil sqrt "reals/")
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (tau_current const-decl "{rr: real |
         (so - si) * (vo - vi) < 0 AND norm(so - si) >= DMOD IMPLIES
          rr >= 0}" tcas_tau nil)
    (horizontal_RA_at const-decl "bool" horizontal_RA nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (- const-decl "Vector" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/"))
   nil)))

