(tcasra
 (time_coalt_TCC1 0
  (time_coalt_TCC1-1 nil 3548588431 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (coalt_entry_exit_TCC1 0
  (coalt_entry_exit_TCC1-1 nil 3548588431
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (coalt_entry_exit_TCC2 0
  (coalt_entry_exit_TCC2-1 nil 3605888206
   ("" (skeep)
    (("" (lemma "Theta_H_vertical_dir[ZTHR]")
      (("" (lemma "Theta_H_vertical_dir[act_H]")
        (("1" (inst?)
          (("1" (inst?)
            (("1" (assert)
              (("1" (mult-by 1 "sq(nzvz)") (("1" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ZTHR formal-const-decl "posreal" tcasra nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Theta_H_vertical_dir formula-decl nil vertical "ACCoRD/")
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Sign type-eq-decl nil sign "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sign const-decl "Sign" sign "reals/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (< const-decl "bool" reals nil)
    (Theta_H const-decl "real" vertical "ACCoRD/")
    (sq const-decl "nonneg_real" sq "reals/")
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" tcasra nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (coalt_entry_exit_def 0
  (coalt_entry_exit_def-1 nil 3548589840
   ("" (skeep)
    (("" (skoletin 1)
      (("" (expand "coalt_entry_exit")
        (("" (expand "vertical_RA_at")
          (("" (case "ZTHR >= abs(nzvz) * TCOA")
            (("1" (case "rl = Theta_H[ZTHR](sz,nzvz,-1)")
              (("1" (expand "vertical_RA")
                (("1" (expand "time_coalt")
                  (("1" (lift-if)
                    (("1" (lemma "vertical_sep_outside_Theta[ZTHR]")
                      (("1" (inst - "nzvz" "sz" "r")
                        (("1" (ground)
                          (("1" (mult-by -2 "abs(nzvz)")
                            (("1" (assert)
                              (("1"
                                (expand "abs")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (mult-by -8 "-nzvz")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (mult-by -4 "nzvz")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (mult-by -2 "abs(nzvz)")
                            (("2" (assert)
                              (("2"
                                (expand "abs")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (mult-by -8 "-nzvz")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (mult-by -4 "nzvz")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (mult-by -2 "abs(nzvz)")
                            (("3" (assert)
                              (("3"
                                (expand "abs")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (ground)
                                    (("1"
                                      (mult-by -8 "-nzvz")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (mult-by -4 "nzvz")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (mult-by -2 "abs(nzvz)")
                            (("4" (assert)
                              (("4"
                                (expand "abs")
                                (("4"
                                  (lift-if)
                                  (("4"
                                    (ground)
                                    (("1"
                                      (mult-by -8 "-nzvz")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (mult-by -4 "nzvz")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "Theta_H")
                (("2" (expand "max")
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (name "H2" "abs(nzvz) * TCOA")
              (("2" (case "rl = Theta_H[H2](sz,nzvz,-1)")
                (("1" (hide -4)
                  (("1" (name "tca1" "-(sz/nzvz)")
                    (("1" (case "r < tca1")
                      (("1" (case "(sz + r*nzvz)*nzvz < 0")
                        (("1" (lemma "vertical_sep_outside_Theta[H2]")
                          (("1" (inst - "nzvz" "sz" "r")
                            (("1" (assert)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "vertical_RA")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "time_coalt")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "Theta_H" -3)
                                          (("1"
                                            (case "nzvz > 0")
                                            (("1"
                                              (expand "sign")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (cross-mult -4)
                                                  (("1"
                                                    (expand "H2")
                                                    (("1"
                                                      (expand "abs" -4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "nzvz")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "sign")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "H2")
                                                      (("2"
                                                        (mult-by
                                                         -2
                                                         "-nzvz")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "abs"
                                                             -3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "Theta_H_vertical_dir[ZTHR]")
                                  (("2"
                                    (inst - "1" "nzvz" "sz")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -10 :dir rl)
                                        (("2"
                                          (typepred "sq(nzvz)")
                                          (("2"
                                            (mult-by -2 "r-ru")
                                            (("2"
                                              (expand "sq")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "Theta_H_vertical_dir[H2]")
                                  (("3"
                                    (inst - "1" "nzvz" "sz")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "sq(nzvz)")
                                        (("3"
                                          (mult-by
                                           -2
                                           "r - Theta_H[H2](sz,nzvz,1)")
                                          (("3"
                                            (expand "sq")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (lemma "Theta_H_vertical_dir[ZTHR]")
                                  (("4"
                                    (inst - "1" "nzvz" "sz")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (replace -10 :dir rl)
                                        (("4"
                                          (typepred "sq(nzvz)")
                                          (("4"
                                            (mult-by -2 "r-ru")
                                            (("4"
                                              (expand "sq")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (lemma "Theta_H_vertical_dir[H2]")
                                  (("5"
                                    (inst - "1" "nzvz" "sz")
                                    (("5"
                                      (assert)
                                      (("5"
                                        (typepred "sq(nzvz)")
                                        (("5"
                                          (mult-by
                                           -2
                                           "r - Theta_H[H2](sz,nzvz,1)")
                                          (("5"
                                            (expand "sq")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (lemma "Theta_H_vertical_dir[ZTHR]")
                                  (("6"
                                    (inst - "1" "nzvz" "sz")
                                    (("6"
                                      (assert)
                                      (("6"
                                        (replace -8 :dir rl)
                                        (("6"
                                          (typepred "sq(nzvz)")
                                          (("6"
                                            (mult-by -2 "r-ru")
                                            (("6"
                                              (expand "sq")
                                              (("6" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (expand "vertical_RA")
                                  (("7"
                                    (expand "time_coalt")
                                    (("7"
                                      (assert)
                                      (("7"
                                        (lift-if)
                                        (("7"
                                          (assert)
                                          (("7"
                                            (split 1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (case
                                                 "NOT 0 <= -((r * nzvz + sz) / nzvz)")
                                                (("1"
                                                  (hide 3)
                                                  (("1"
                                                    (mult-by
                                                     1
                                                     "sq(nzvz)")
                                                    (("1"
                                                      (expand "sq")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (invoke
                                                     (case
                                                      "abs(%1) <= (%2)")
                                                     (! -1 2)
                                                     (! 2 2))
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "abs_neg")
                                                      (("2"
                                                        (rewrite
                                                         "abs_div")
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "tca1")
                          (("2" (mult-by -1 "sq(nzvz)")
                            (("2" (expand "sq")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "r > tca1")
                        (("1" (case "(sz + r*nzvz)*nzvz > 0")
                          (("1" (case "r > rl")
                            (("1" (assert)
                              (("1"
                                (expand "vertical_RA")
                                (("1"
                                  (expand "time_coalt")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lemma
                                             "vertical_sep_outside_Theta[ZTHR]")
                                            (("1"
                                              (inst - "nzvz" "sz" "r")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-by -1 "sq(nzvz)")
                                            (("2"
                                              (expand "sq")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "vertical_sep_outside_Theta[ZTHR]")
                                            (("3"
                                              (inst - "nzvz" "sz" "r")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "Theta_H_vertical_dir[ZTHR]")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (typepred
                                                         "sq(nzvz)")
                                                        (("3"
                                                          (mult-by
                                                           -2
                                                           "Theta_H[ZTHR](sz,nzvz,-1)-r")
                                                          (("3"
                                                            (expand
                                                             "sq")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (lemma
                                             "vertical_sep_outside_Theta[ZTHR]")
                                            (("4"
                                              (inst - "nzvz" "sz" "r")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (lemma
                                                   "Theta_H_vertical_dir[ZTHR]")
                                                  (("4"
                                                    (inst
                                                     -
                                                     "-1"
                                                     "nzvz"
                                                     "sz")
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (typepred
                                                         "sq(nzvz)")
                                                        (("4"
                                                          (mult-by
                                                           -2
                                                           "Theta_H[ZTHR](sz,nzvz,-1)-r")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (expand
                                                               "sq")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "rl < tca1")
                              (("1" (assert) nil nil)
                               ("2"
                                (replace -4 1)
                                (("2"
                                  (expand "Theta_H" 1)
                                  (("2"
                                    (expand "tca1")
                                    (("2"
                                      (cross-mult 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "sign")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "sign")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "tca1")
                            (("2" (mult-by -1 "sq(nzvz)")
                              (("2"
                                (expand "sq")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "r = tca1")
                            (("1" (case "sz + r*nzvz = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "vertical_RA")
                                    (("1"
                                      (expand "time_coalt")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "FORALL (egv1:posreal): Theta_H[egv1](sz,nzvz,-1) <= r AND r<=Theta_H[egv1](sz,nzvz,1)")
                                          (("1"
                                            (inst-cp - "H2")
                                            (("1"
                                              (inst - "ZTHR")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma
                                               "vertical_sep_outside_Theta[egv1]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst - "r")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "Theta_H")
                  (("2" (expand "max")
                    (("2" (lift-if) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (expand "H2" +) (("3" (grind-reals) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (coalt_entry_exit const-decl
     "{r12: [real, real] | LET (r1, r2) = r12 IN r1 < r2}" tcasra nil)
    (vertical_RA_at const-decl "bool" tcasra nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (tca1 skolem-const-decl "real" tcasra nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (abs_neg formula-decl nil abs_lems "reals/")
    (Theta_H_vertical_dir formula-decl nil vertical "ACCoRD/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nzvz skolem-const-decl "nzreal" tcasra nil)
    (sign const-decl "Sign" sign "reals/")
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (H2 skolem-const-decl "nnreal" tcasra nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (div_mult_pos_neg_lt1 formula-decl nil extra_real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Sign type-eq-decl nil sign "reals/")
    (Theta_H const-decl "real" vertical "ACCoRD/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (time_coalt const-decl "real" tcasra nil)
    (vertical_sep_outside_Theta formula-decl nil vertical "ACCoRD/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (vertical_RA const-decl "bool" tcasra nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ZTHR formal-const-decl "posreal" tcasra nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" tcasra nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   shostak))
 (cd2d_TCAS_after_TCC1 0
  (cd2d_TCAS_after_TCC1-1 nil 3574590165 ("" (subtype-tcc) nil nil)
   ((comp_zero_y formula-decl nil vectors_2D "vectors/")
    (comp_zero_x formula-decl nil vectors_2D "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (det const-decl "real" det_2D "vectors/")
    (Delta const-decl "real" horizontal "ACCoRD/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (cd2d_TCAS_after_rewrite 0
  (cd2d_TCAS_after_rewrite-1 nil 3574590245
   ("" (skeep)
    (("" (expand "cd2d_TCAS_after")
      (("" (split)
        (("1" (flatten)
          (("1" (case "v2=zero")
            (("1" (replaces -1)
              (("1" (assert) (("1" (skeep -1) nil nil)) nil)) nil)
             ("2" (lemma "vectors_2D.sqv_eq_0")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skeep -1)
                    (("2" (hide 3)
                      (("2" (splash 3)
                        (("1" (lemma "horizontal_sep_outside_Theta")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "Delta_ge_0_2")
                          (("2" (inst?)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split -)
            (("1" (flatten)
              (("1" (lemma "vectors_2D.sqv_eq_0")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (replaces -1) (("1" (inst + "t") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "vectors_2D.sqv_eq_0")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (lemma "horizontal_sep_outside_Theta")
                      (("2" (inst - "v2" "s2" "Theta_D(s2,v2,1)")
                        (("2" (assert)
                          (("2" (lemma "Theta_D_le")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst + "Theta_D(s2,v2,1)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cd2d_TCAS_after const-decl "bool" tcasra nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Theta_D_le formula-decl nil horizontal "ACCoRD/")
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (Delta_ge_0_2 formula-decl nil horizontal "ACCoRD/")
    (horizontal_sep_outside_Theta formula-decl nil horizontal
     "ACCoRD/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (Theta_D const-decl "real" horizontal "ACCoRD/")
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (Delta const-decl "real" horizontal "ACCoRD/")
    (HMD formal-const-decl "posreal" tcasra nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/"))
   nil))
 (cd2d_TCAS_after_shift_eq_TCC1 0
  (cd2d_TCAS_after_shift_eq_TCC1-1 nil 3574609190
   ("" (subtype-tcc) nil nil) nil nil))
 (cd2d_TCAS_after_shift_eq_TCC2 0
  (cd2d_TCAS_after_shift_eq_TCC2-1 nil 3574609190
   ("" (subtype-tcc) nil nil) nil nil))
 (cd2d_TCAS_after_shift_eq 0
  (cd2d_TCAS_after_shift_eq-1 nil 3574609191
   ("" (skeep)
    (("" (rewrite "cd2d_TCAS_after_rewrite" :dir rl)
      (("" (rewrite "cd2d_TCAS_after_rewrite" :dir rl)
        (("" (split)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (inst 1 "t+nnt") (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (inst 1 "nnt-t") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cd2d_TCAS_after_rewrite formula-decl nil tcasra nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (cd2d_TCAS_after_shift_le 0
  (cd2d_TCAS_after_shift_le-1 nil 3574609262
   ("" (skeep)
    (("" (rewrite "cd2d_TCAS_after_rewrite" :dir rl)
      (("" (rewrite "cd2d_TCAS_after_rewrite" :dir rl)
        (("" (skeep) (("" (inst 1 "nnt") nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cd2d_TCAS_after_rewrite formula-decl nil tcasra nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil))
   shostak))
 (TCASII_RA_rewrite 0
  (TCASII_RA_rewrite-2 nil 3574590644
   ("" (skeep)
    (("" (expand "TCASII_RA")
      (("" (rewrite "cd2d_TCAS_after_rewrite" :dir rl)
        (("" (expand "TCASII_RA_def") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TCASII_RA const-decl "bool" tcasra nil)
    (TCASII_RA_def const-decl "bool" tcasra nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (cd2d_TCAS_after_rewrite formula-decl nil tcasra nil))
   nil)
  (TCASII_RA_rewrite-1 nil 3572086284
   ("" (skeep)
    (("" (expand "TCASII_RA_def")
      (("" (ground)
        (("1" (lemma "vectors_2D.sqv_eq_0")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "vect2(vo-vi)=zero")
          (("1" (replaces -1)
            (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
           ("2" (lemma "Delta_ge_0_2")
            (("2" (inst?)
              (("1" (assert)
                (("1" (skosimp*) (("1" (inst + "nnt!1") nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("3" (case "vect2(vo-vi)=zero")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (lemma "horizontal_sep_outside_Theta")
              (("2" (skosimp*)
                (("2" (inst - "vo-vi" "so-si" "nnt!1")
                  (("2" (assert)
                    (("2" (lemma "Delta_ge_0_2")
                      (("2" (inst?)
                        (("2" (assert) (("2" (inst + "nnt!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (lemma "Delta_ge_0_2")
          (("4" (inst?)
            (("1" (assert)
              (("1" (skeep -2) (("1" (inst?) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skosimp*)
          (("5" (lemma "horizontal_sep_outside_Theta")
            (("5" (inst - "vo-vi" "so-si" "nnt!1")
              (("5" (assert)
                (("5" (lemma "Delta_ge_0_2")
                  (("5" (inst?)
                    (("5" (assert) (("5" (inst + "nnt!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (inst + "0") (("6" (assert) nil nil)) nil)
         ("7" (lemma "Theta_D_on_D")
          (("7" (inst?)
            (("7" (assert) (("7" (inst?) (("7" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Theta_D_on_D formula-decl nil horizontal "ACCoRD/")
    (Theta_D const-decl "real" horizontal "ACCoRD/")
    (Sign type-eq-decl nil sign "reals/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (horizontal_sep_outside_Theta formula-decl nil horizontal
     "ACCoRD/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Delta const-decl "real" horizontal "ACCoRD/")
    (det const-decl "real" det_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (comp_zero_y formula-decl nil vectors_2D "vectors/")
    (comp_zero_x formula-decl nil vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (Delta_ge_0_2 formula-decl nil horizontal "ACCoRD/")
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (sqv_zero formula-decl nil vectors_2D "vectors/")
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/"))
   shostak)))

