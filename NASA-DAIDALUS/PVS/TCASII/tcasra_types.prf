(tcasra_types
 (tcas_alt_at_TCC1 0
  (tcas_alt_at_TCC1-1 nil 3559925736
   ("" (skeep)
    (("" (case "eps = 1")
      (("1" (replace -1)
        (("1" (assert) (("1" (cross-mult 3) nil nil)) nil)) nil)
       ("2" (assert)
        (("2" (typepred "eps")
          (("2" (assert)
            (("2" (replaces -2)
              (("2" (assert)
                (("2" (mult-by 4 "MaxVAccel") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (tcas_alt_at_TCC2 0
  (tcas_alt_at_TCC2-1 nil 3559925736 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (tcas_alt_at_solved_TCC1 0
  (tcas_alt_at_solved_TCC1-1 nil 3560083478 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (tcas_alt_at_solved_TCC2 0
  (tcas_alt_at_solved_TCC2-1 nil 3560093593 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (tcas_alt_at_solved_TCC3 0
  (tcas_alt_at_solved_TCC3-1 nil 3560171679 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (tcas_alt_at_solved 0
  (tcas_alt_at_solved-1 nil 3560083274
   ("" (skeep)
    (("" (case "tau > 0")
      (("1" (assert)
        (("1" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1" (expand "tcas_alt_at")
                (("1" (assert)
                  (("1" (case "eps*voz >= MaxVSpeed")
                    (("1" (assert)
                      (("1" (case "0^2 = 0")
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (typepred "eps")
                              (("1"
                                (ground)
                                (("1" (cross-mult 2) nil nil)
                                 ("2" (cross-mult 2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide 2)
                        (("2"
                          (name "quadtime"
                                "(eps*MaxVSpeed - voz) / (MaxVAccel * eps)")
                          (("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (case "tau <= quadtime")
                                (("1"
                                  (copy -1)
                                  (("1"
                                    (case
                                     "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                    (("1"
                                      (typepred "eps")
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (replace -1 -2)
                                        (("2"
                                          (cross-mult -2)
                                          (("2"
                                            (case
                                             "NOT MaxVSpeed >= tau*MaxVAccel + eps*voz")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 -2 :dir rl)
                                        (("2"
                                          (label "three" 3)
                                          (("2"
                                            (hide "three")
                                            (("2"
                                              (rewrite
                                               "minus_div2"
                                               :dir
                                               rl)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "eps*eps = 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name
                                                       "aa"
                                                       "-eps/(2*MaxVAccel)")
                                                      (("1"
                                                        (case
                                                         "NOT MaxVSpeed * eps * voz / (MaxVAccel * eps) = 2 *
                                                                                                                         (MaxVAccel * MaxVSpeed * eps * eps * voz /
                                                                                                                           (2 * (MaxVAccel * MaxVAccel * eps * eps)))")
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (name
                                                               "bb"
                                                               "voz/MaxVAccel + eps*tau")
                                                              (("2"
                                                                (name
                                                                 "cc"
                                                                 "-eps*voz^2/(2*MaxVAccel) +soz-X")
                                                                (("2"
                                                                  (case
                                                                   "NOT quadratic(aa,bb,cc)(MaxVSpeed) = 0")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-7
                                                                      1))
                                                                    (("1"
                                                                      (expand
                                                                       "aa")
                                                                      (("1"
                                                                        (expand
                                                                         "bb")
                                                                        (("1"
                                                                          (expand
                                                                           "cc")
                                                                          (("1"
                                                                            (typepred
                                                                             "eps")
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-4
                                                                      -8))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (invoke
                                                                         (name
                                                                          "aa2"
                                                                          "%1")
                                                                         (!
                                                                          3
                                                                          2
                                                                          2
                                                                          2
                                                                          1
                                                                          0
                                                                          1))
                                                                        (("2"
                                                                          (invoke
                                                                           (name
                                                                            "bb2"
                                                                            "%1")
                                                                           (!
                                                                            3
                                                                            2
                                                                            2
                                                                            2
                                                                            1
                                                                            0
                                                                            2))
                                                                          (("2"
                                                                            (invoke
                                                                             (name
                                                                              "cc2"
                                                                              "%1 - %2")
                                                                             (!
                                                                              3
                                                                              2
                                                                              2
                                                                              2
                                                                              1
                                                                              0
                                                                              3)
                                                                             (!
                                                                              3
                                                                              2
                                                                              2
                                                                              2
                                                                              2))
                                                                            (("2"
                                                                              (case
                                                                               "NOT quadratic(aa2,bb2,cc2)(MaxVSpeed) = 0")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -4
                                                                                 "MaxVAccel")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "aa2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "bb2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cc2")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "aa")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "bb")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cc")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -5)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "quad_eq_0")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "aa2"
                                                                                     "bb2"
                                                                                     "cc2"
                                                                                     "MaxVSpeed")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "eps")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (cross-mult
                                                                                                   2)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              1))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "aa2")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "bb2")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "cc2")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    (("2"
                                                                                                      (mult-by
                                                                                                       1
                                                                                                       "MaxVAccel")
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "eps")
                                                                                                        (("2"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1))
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "aa2")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "bb2")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "cc2")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (hide-all-but
                                                                                             (-3
                                                                                              1))
                                                                                            (("4"
                                                                                              (expand
                                                                                               "aa2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "bb2")
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "cc2")
                                                                                                  (("4"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "eps")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "tcas_alt_at")
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (cross-mult -2)
                          (("1" (mult-by 1 "eps")
                            (("1" (typepred "eps")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "tcas_alt_at")
                    (("2" (assert)
                      (("2"
                        (name "quadtime"
                              "(eps*MaxVSpeed - voz) / (MaxVAccel * eps)")
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (case "tau <= quadtime")
                              (("1"
                                (copy -1)
                                (("1"
                                  (case
                                   "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                  (("1"
                                    (typepred "eps")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (case
                                     "NOT MaxVSpeed >= tau*MaxVAccel + eps*voz")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "min")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                  (("1"
                                    (typepred "eps")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (replace -1 1)
                                    (("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (flatten)
                    (("3" (expand "tcas_alt_at")
                      (("3" (assert)
                        (("3"
                          (name "quadtime"
                                "(eps*MaxVSpeed - voz) / (MaxVAccel * eps)")
                          (("3" (replace -1)
                            (("3" (assert)
                              (("3"
                                (case "tau <= quadtime")
                                (("1"
                                  (copy -1)
                                  (("1"
                                    (case
                                     "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                    (("1"
                                      (typepred "eps")
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (replace -1 -2)
                                      (("2" (cross-mult -2) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                        (("1"
                                          (typepred "eps")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2"
                                                  (expand "expt")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "quadratic")
                                                      (("2"
                                                        (expand "sq")
                                                        (("2"
                                                          (field 2)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "NOT tau = 0")
        (("1" (assert) nil nil)
         ("2" (replace -1) (("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (^ const-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (max_0_nnreal formula-decl nil min_max "reals/")
    (min_nnreal_0 formula-decl nil min_max "reals/")
    (nat_exp application-judgement "nat" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max_0_npreal formula-decl nil min_max "reals/")
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (discr const-decl "real" quadratic "reals/")
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (quad_eq_0 formula-decl nil quadratic "reals/")
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (aa2 skolem-const-decl "Sign" tcasra_types nil)
    (cc2 skolem-const-decl "real" tcasra_types nil)
    (bb2 skolem-const-decl "real" tcasra_types nil)
    (bb skolem-const-decl "real" tcasra_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cc skolem-const-decl "real" tcasra_types nil)
    (aa skolem-const-decl "nzreal" tcasra_types nil)
    (quadratic const-decl "real" quadratic "reals/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sign_mult_clos application-judgement "Sign" sign "reals/")
    (minus_div2 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (tcas_alt_at const-decl "real" tcasra_types nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (tcas_alt_at_rewrite_TCC1 0
  (tcas_alt_at_rewrite_TCC1-1 nil 3560780290 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (tcas_alt_at_rewrite 0
  (tcas_alt_at_rewrite-2 nil 3560780327
   ("" (skeep)
    ((""
      (name "A"
            "tcas_alt_at(soz, voz, MaxVAccel, MaxVSpeed, eps)(tau)")
      (("" (lemma "tcas_alt_at_solved")
        (("" (inst?)
          (("" (assert)
            (("" (case "tau = 0")
              (("1" (assert) nil nil)
               ("2" (case "NOT tau > 0")
                (("1" (assert) nil nil)
                 ("2" (hide 1)
                  (("2" (assert)
                    (("2" (case "eps * voz >= MaxVSpeed")
                      (("1" (assert)
                        (("1" (typepred "eps") (("1" (ground) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (case "MaxVSpeed >= eps * voz + tau * MaxVAccel")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (case
                                 "NOT A = quadratic(-eps/(2*MaxVAccel), eps * tau + voz/MaxVAccel,
                                                             -eps * (voz * voz)/(2*MaxVAccel) + soz)
                                                            (MaxVSpeed)")
                                (("1"
                                  (mult-by -4 "1/(2*MaxVAccel)")
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (replace -6)
                                    (("2"
                                      (hide-all-but 3)
                                      (("2"
                                        (typepred "eps")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tcas_alt_at const-decl "real" tcasra_types nil)
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (quadratic const-decl "real" quadratic "reals/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sign_mult_clos application-judgement "Sign" sign "reals/")
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (tcas_alt_at_solved formula-decl nil tcasra_types nil))
   nil)
  (tcas_alt_at_rewrite-1 nil 3560780298
   ("" (skeep)
    (("" (case "tau > 0")
      (("1" (assert)
        (("1" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1" (expand "tcas_alt_at")
                (("1" (assert)
                  (("1" (case "eps*voz >= MaxVSpeed")
                    (("1" (assert)
                      (("1" (expand "min")
                        (("1" (expand "max")
                          (("1" (case "0^2 = 0")
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "eps")
                                  (("1"
                                    (ground)
                                    (("1" (cross-mult 2) nil)
                                     ("2" (cross-mult 2) nil)))))))))
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil)))))))))))
                     ("2" (assert)
                      (("2" (hide 2)
                        (("2"
                          (name "quadtime"
                                "(eps*MaxVSpeed - voz) / (MaxVAccel * eps)")
                          (("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (case "tau <= quadtime")
                                (("1"
                                  (copy -1)
                                  (("1"
                                    (case
                                     "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                    (("1"
                                      (typepred "eps")
                                      (("1" (ground) nil)))
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (replace -1 -2)
                                        (("2"
                                          (cross-mult -2)
                                          (("2"
                                            (case
                                             "NOT MaxVSpeed >= tau*MaxVAccel + eps*voz")
                                            (("1" (assert) nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "max")
                                                    (("2"
                                                      (propax)
                                                      nil)))))))))))))))))))))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1 -2 :dir rl)
                                            (("2"
                                              (label "three" 3)
                                              (("2"
                                                (hide "three")
                                                (("2"
                                                  (rewrite
                                                   "minus_div2"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "eps*eps = 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (name
                                                           "aa"
                                                           "-eps/(2*MaxVAccel)")
                                                          (("1"
                                                            (case
                                                             "NOT MaxVSpeed * eps * voz / (MaxVAccel * eps) = 2 *
                                                                                                                         (MaxVAccel * MaxVSpeed * eps * eps * voz /
                                                                                                                           (2 * (MaxVAccel * MaxVAccel * eps * eps)))")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil)))
                                                             ("2"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (name
                                                                   "bb"
                                                                   "voz/MaxVAccel + eps*tau")
                                                                  (("2"
                                                                    (name
                                                                     "cc"
                                                                     "-eps*voz^2/(2*MaxVAccel) +soz-X")
                                                                    (("2"
                                                                      (case
                                                                       "NOT quadratic(aa,bb,cc)(MaxVSpeed) = 0")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-7
                                                                          1))
                                                                        (("1"
                                                                          (expand
                                                                           "aa")
                                                                          (("1"
                                                                            (expand
                                                                             "bb")
                                                                            (("1"
                                                                              (expand
                                                                               "cc")
                                                                              (("1"
                                                                                (typepred
                                                                                 "eps")
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (hide
                                                                         (-4
                                                                          -8))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (invoke
                                                                             (name
                                                                              "aa2"
                                                                              "%1")
                                                                             (!
                                                                              3
                                                                              2
                                                                              2
                                                                              2
                                                                              1
                                                                              0
                                                                              1))
                                                                            (("2"
                                                                              (invoke
                                                                               (name
                                                                                "bb2"
                                                                                "%1")
                                                                               (!
                                                                                3
                                                                                2
                                                                                2
                                                                                2
                                                                                1
                                                                                0
                                                                                2))
                                                                              (("2"
                                                                                (invoke
                                                                                 (name
                                                                                  "cc2"
                                                                                  "%1 - %2")
                                                                                 (!
                                                                                  3
                                                                                  2
                                                                                  2
                                                                                  2
                                                                                  1
                                                                                  0
                                                                                  3)
                                                                                 (!
                                                                                  3
                                                                                  2
                                                                                  2
                                                                                  2
                                                                                  2))
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT quadratic(aa2,bb2,cc2)(MaxVSpeed) = 0")
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     -4
                                                                                     "MaxVAccel")
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "aa2")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "bb2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cc2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "aa")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "bb")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cc")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil)))))))))))))))))
                                                                                   ("2"
                                                                                    (hide
                                                                                     -5)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "quad_eq_0")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "aa2"
                                                                                         "bb2"
                                                                                         "cc2"
                                                                                         "MaxVSpeed")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "eps")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil)))
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil)))))
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (cross-mult
                                                                                                       2)
                                                                                                      nil)))))))
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "aa2")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "bb2")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cc2")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("2"
                                                                                                          (mult-by
                                                                                                           1
                                                                                                           "MaxVAccel")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "eps")
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil)))
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))))))))))
                                                                                               ("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "aa2")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "bb2")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "cc2")
                                                                                                        (("3"
                                                                                                          (propax)
                                                                                                          nil)))))))))))
                                                                                               ("4"
                                                                                                (hide-all-but
                                                                                                 (-3
                                                                                                  1))
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "aa2")
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "bb2")
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "cc2")
                                                                                                      (("4"
                                                                                                        (grind)
                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "eps")
                                                          (("2"
                                                            (ground)
                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))
           ("2" (assert)
            (("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "tcas_alt_at")
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (cross-mult -2)
                          (("1" (mult-by 1 "eps")
                            (("1" (typepred "eps")
                              (("1" (grind) nil)))))))))))))))
                 ("2" (flatten)
                  (("2" (expand "tcas_alt_at")
                    (("2" (assert)
                      (("2"
                        (name "quadtime"
                              "(eps*MaxVSpeed - voz) / (MaxVAccel * eps)")
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (case "tau <= quadtime")
                              (("1"
                                (copy -1)
                                (("1"
                                  (case
                                   "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                  (("1"
                                    (typepred "eps")
                                    (("1" (ground) nil)))
                                   ("2"
                                    (case
                                     "NOT MaxVSpeed >= tau*MaxVAccel + eps*voz")
                                    (("1" (assert) nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (propax)
                                              nil)))))))))))))))
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                  (("1"
                                    (typepred "eps")
                                    (("1" (ground) nil)))
                                   ("2"
                                    (replace -1 1)
                                    (("2"
                                      (cross-mult 1)
                                      nil)))))))))))))))))))))
                 ("3" (assert)
                  (("3" (flatten)
                    (("3" (expand "tcas_alt_at")
                      (("3" (assert)
                        (("3"
                          (name "quadtime"
                                "(eps*MaxVSpeed - voz) / (MaxVAccel * eps)")
                          (("3" (replace -1)
                            (("3" (assert)
                              (("3"
                                (case "tau <= quadtime")
                                (("1"
                                  (copy -1)
                                  (("1"
                                    (case
                                     "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                    (("1"
                                      (typepred "eps")
                                      (("1" (ground) nil)))
                                     ("2"
                                      (replace -1 -2)
                                      (("2" (cross-mult -2) nil)))))))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (expand "max")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "NOT quadtime = (MaxVSpeed-eps*voz)/MaxVAccel")
                                          (("1"
                                            (typepred "eps")
                                            (("1" (ground) nil)))
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand "expt")
                                                (("2"
                                                  (expand "expt")
                                                  (("2"
                                                    (expand "expt")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "quadratic")
                                                        (("2"
                                                          (expand "sq")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (field)
                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("2" (case "NOT tau = 0")
        (("1" (assert) nil)
         ("2" (replace -1) (("2" (assert) (("2" (grind) nil))))))))))
    nil)
   nil nil))
 (tcas_alt_quad_optimum 0
  (tcas_alt_quad_optimum-1 nil 3560777005
   ("" (skeep)
    (("" (typepred "eps")
      (("" (typepred "dir") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sign_mult_clos application-judgement "Sign" sign "reals/")
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (tcas_direction_lem 0
  (tcas_direction_lem-1 nil 3559987305
   ("" (grind :exclude "tcas_alt_at") nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sign const-decl "Sign" sign "reals/")
    (tcas_direction const-decl "Sign" tcasra_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (tcas_direction_lem_Sep 0
  (tcas_direction_lem_Sep-1 nil 3560076059
   ("" (grind :exclude "tcas_alt_at") nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (tcas_direction const-decl "Sign" tcasra_types nil)
    (Sep const-decl "real" tcasra_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sign const-decl "Sign" sign "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (corrective?_TCC1 0
  (corrective?_TCC1-1 nil 3563114368 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (- const-decl "Vector" vectors_2D "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (corrective?_TCC2 0
  (corrective?_TCC2-1 nil 3563114368
   ("" (skosimp*)
    ((""
      (typepred
       "tau_current(vect2(so!1), vect2(vo!1), vect2(si!1), vect2(vi!1))")
      (("" (assert)
        (("" (hide -2 3)
          (("" (split)
            (("1" (hide 2) (("1" (grind) nil nil)) nil)
             ("2" (hide -1)
              (("2" (both-sides-f 1 "sq")
                (("1" (expand "norm")
                  (("1" (sq-simp) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (rewrite "sq_ge") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tau_current const-decl "{rr: real |
         (so - si) * (vo - vi) < 0 AND norm(so - si) >= DMOD IMPLIES
          rr >= 0}" tcas_tau nil)
    (/= const-decl "boolean" notequal nil)
    (DMOD formal-const-decl "posreal" tcasra_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (- const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sq_ge formula-decl nil sq "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)))

