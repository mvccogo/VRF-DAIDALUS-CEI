% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

timevars : THEORY
BEGIN

  IMPORTING vectors@vectors_2D,
            ACCoRD@definitions

  % Horizontal time variables

  timevar?(f:[[Vect2,Vect2]->real]) : bool = 
    FORALL (s,v:Vect2) :  
      s*v > 0 IMPLIES f(s,v) < 0

  TimeVar : TYPE = (timevar?)

  symmetric?(tvar:TimeVar) : bool =
    FORALL (s,v:Vect2): tvar(s,v) = tvar(-s,-v)

  tcpa(s,v:Vect2) : real =
    IF v /= zero THEN horizontal_tca(s,v) 
    ELSE 0 
    ENDIF

  tcpa_timevar : JUDGEMENT
    tcpa HAS_TYPE TimeVar

  tcpa_symm : LEMMA
    symmetric?(tcpa)

  max_tvar(tvar:TimeVar)(s,v:Vect2) : real =
    max(tvar(s,v),tvar(-s,-v))

  max_tvar_timevar : JUDGEMENT
    max_tvar(tvar:TimeVar) HAS_TYPE TimeVar

  max_tvar_symm : LEMMA
    FORALL(tvar:TimeVar):
      symmetric?(max_tvar(tvar))

  min_tvar(tvar:TimeVar)(s,v:Vect2) : real =
    min(tvar(s,v),tvar(-s,-v))

  min_tvar_timevar : JUDGEMENT
    min_tvar(tvar:TimeVar) HAS_TYPE TimeVar

  min_tvar_symm : LEMMA
    FORALL(tvar:TimeVar):
      symmetric?(min_tvar(tvar))

  % Tau: range/range rate

  tau(s:Vect2,(v:Vect2|(s*v /= 0))) : real = -sqv(s)/(s*v)

  tau_tca: LEMMA FORALL (s,v:Vect2): s*v<0 IMPLIES
    tau(s,v) >= horizontal_tca(s,v)

  % Vertical time variables

  sz,vz   : VAR real

  % Time to co-altitude
  tcoa(sz,vz): real = 
    IF sz*vz < 0 THEN -(sz/vz) ELSE -1 ENDIF

END timevars
