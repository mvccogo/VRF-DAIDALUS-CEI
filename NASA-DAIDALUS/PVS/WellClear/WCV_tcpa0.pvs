% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

WCV_tcpa0[TCPA,TCOA:nnreal,DMOD,HMD,ZTHR:posreal]  : THEORY 

% TCPA is the time to closest point of approach threshold
% TCOA is the time to co-altitude threshold
% DTHR is the distance threshold
% HMD  is the horizontal miss-distance threshold
% ZTHR is the altitude threshold

BEGIN

  IMPORTING horizontal_WCV_tcpa0[TCPA,DMOD,HMD],
  	    vertical_WCV[TCOA,ZTHR],
	    vectors@vectors_3D,
  	    ACCoRD@cd3d

  s,v     : VAR Vect3  
  s2,v2   : VAR Vect2
  so,vo,
  si,vi   : VAR Vect3
  sz      : VAR real
  nzvz    : VAR nzreal
  B	  : VAR nnreal
  T	  : VAR posreal

  WCV_tcpa0(s,v): bool =
    horizontal_WCV_tcpa0(vect2(s),vect2(v)) AND
    vertical_WCV(s`z,v`z)

  WCV_tcpa0_interval(B,(T|B<T),s,v): [# entry:Lookahead[B,T],
  			       	       exit :Lookahead[B,T] #] =
    LET ventryexit = vertical_WCV_interval(B,T,s`z,v`z),
        (ventry,vexit) = (ventryexit`entry,ventryexit`exit)
    IN  IF ventry>vexit THEN (# entry:=T,exit:=B #)
        ELSIF ventry=vexit AND horizontal_WCV_tcpa0(vect2(s)+ventry*vect2(v),vect2(v))
	  THEN (# entry:=ventry,exit:=ventry #)
	ELSIF ventry=vexit THEN (# entry:=T,exit:=B #)
	ELSE 
	  LET hni = horizontal_WCV_tcpa0_interval(vexit-ventry,vect2(s)+ventry*vect2(v),vect2(v))
	  IN  (# entry:= hni`entry+ventry, exit:= hni`exit+ventry #)
	ENDIF

  WCV_tcpa0_interval_def: LEMMA B<T IMPLIES
    FORALL (t:Lookahead[B,T]):
      LET nwcentryexit = WCV_tcpa0_interval(B,T,s,v),
          (nwcentry,nwcexit) = (nwcentryexit`entry,nwcentryexit`exit)
    IN
      WCV_tcpa0(s+t*v,v) IFF
      (nwcentry<=t AND t<=nwcexit)

  WCV_tcpa0_detection(B,T,s,v): bool =
    IF B=T THEN WCV_tcpa0(s+B*v,v)
    ELSIF B>T THEN false
    ELSE LET nwcint = WCV_tcpa0_interval(B,T,s,v) IN nwcint`entry<=nwcint`exit
    ENDIF

  WCV_tcpa0_detection_def: LEMMA
    WCV_tcpa0_detection(B,T,s,v) IFF
    (EXISTS (t:Lookahead[B,T]): WCV_tcpa0(s+t*v,v))

END WCV_tcpa0
