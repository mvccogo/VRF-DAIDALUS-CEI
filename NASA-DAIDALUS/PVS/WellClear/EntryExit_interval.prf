(EntryExit_interval
 (EmptyInterval_TCC1 0
  (EmptyInterval_TCC1-1 nil 3625226768 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (EmptyInterval_TCC2 0
  (EmptyInterval_TCC2-1 nil 3625226768 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (midpoint_TCC1 0
  (midpoint_TCC1-1 nil 3625259534 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" EntryExit_interval nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{t: nnreal | t > B}" EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (nonempty_def 0
  (nonempty_def-1 nil 3625226782 ("" (grind) nil nil)
   ((EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (T formal-const-decl "{t: nnreal | t > B}" EntryExit_interval nil)
    (> const-decl "bool" reals nil)
    (B formal-const-decl "nnreal" EntryExit_interval nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty? const-decl "bool" EntryExit_interval nil))
   shostak))
 (nonempty_subint 0
  (nonempty_subint-1 nil 3625494278 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (subint? const-decl "bool" EntryExit_interval nil))
   shostak)))

