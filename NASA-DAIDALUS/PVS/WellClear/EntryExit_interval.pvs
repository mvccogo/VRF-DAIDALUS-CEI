% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

EntryExit_interval[B:nnreal,T:{t:nnreal | t > B}] : THEORY
BEGIN
  IMPORTING ACCoRD@Lookahead

  EntryExit : TYPE = [#
    entry, exit : Lookahead[B,T]
  #]

  EmptyInterval : MACRO EntryExit = (#
    entry := T,
    exit  := B
  #)

  WholeInterval : MACRO EntryExit = (#
    entry := B,
    exit  := T
  #) 

  ee : VAR EntryExit
  t  : VAR Lookahead[B,T]

  nonempty?(ee) : bool =
    ee`entry <= ee`exit

  singleton?(ee) : bool =
    ee`entry = ee`exit

  member(t,ee) : MACRO bool =
    ee`entry <= t AND t <= ee`exit

  midpoint(nee:(nonempty?)) :  {t : Lookahead[B,T] | member(t,nee)} =
    (nee`entry+nee`exit)/2

  nonempty_def : LEMMA
    nonempty?(ee) IFF EXISTS (t:Lookahead[B,T]): member(t,ee)

  subint?(ee1,ee2:EntryExit): bool =
    ee2`entry<=ee1`entry AND
    ee2`exit >=ee1`exit  

  nonempty_subint: LEMMA FORALL (ee1,ee2:EntryExit):
    nonempty?(ee1) AND subint?(ee1,ee2) IMPLIES
    nonempty?(ee2)

END EntryExit_interval
