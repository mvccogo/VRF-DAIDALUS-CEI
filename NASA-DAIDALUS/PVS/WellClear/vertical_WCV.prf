(vertical_WCV
 (vertical_WCV_symm 0
  (vertical_WCV_symm-1 nil 3598395836
   ("" (skeep)
    (("" (expand "vertical_WCV")
      (("" (rewrite "abs_neg")
        (("" (expand "tcoa") (("" (grind :exclude "abs") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (vertical_WCV const-decl "bool" vertical_WCV nil)
    (tcoa const-decl "real" timevars nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (abs_neg formula-decl nil abs_lems "reals/"))
   shostak))
 (vertical_WCV_rewrite_TCC1 0
  (vertical_WCV_rewrite_TCC1-1 nil 3592557589
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (vertical_WCV_rewrite 0
  (vertical_WCV_rewrite-1 nil 3592557591
   ("" (skeep)
    (("" (expand "vertical_WCV")
      (("" (case-replace "abs(sz) <= ZTHR")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (expand "tcoa")
            (("2" (case-replace "sz*vz < 0")
              (("1" (case-replace "vz=0")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
               ("2" (assert)
                (("2" (case-replace "vz=0")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (flatten) (("2" (field -2) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (vertical_WCV const-decl "bool" vertical_WCV nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (neg_le formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (tcoa const-decl "real" timevars nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ZTHR formal-const-decl "posreal" vertical_WCV nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (coalt_entry_exit_TCC1 0
  (coalt_entry_exit_TCC1-1 nil 3548588431 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ZTHR formal-const-decl "posreal" vertical_WCV nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" vertical_WCV nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (coalt_entry_exit_TCC2 0
  (coalt_entry_exit_TCC2-1 nil 3605887456
   ("" (skeep)
    (("" (lemma "Theta_H_vertical_dir[act_H]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (lemma "Theta_H_vertical_dir[ZTHR]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (mult-by 1 "sq(nzvz)") (("1" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (replaces -1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TCOA formal-const-decl "nnreal" vertical_WCV nil)
    (nnreal type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ZTHR formal-const-decl "posreal" vertical_WCV nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Theta_H_vertical_dir formula-decl nil vertical "ACCoRD/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (Theta_H const-decl "real" vertical "ACCoRD/")
    (< const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sign const-decl "Sign" sign "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sign type-eq-decl nil sign "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (coalt_entry_exit_def 0
  (coalt_entry_exit_def-1 nil 3548589840
   ("" (skeep)
    (("" (skoletin 1)
      (("" (expand "coalt_entry_exit")
        (("" (expand "vertical_WCV_at")
          (("" (rewrite "vertical_WCV_rewrite")
            ((""
              (name "time_coalt" "(IF abs(r * nzvz + sz) <= ZTHR THEN 0
                ELSE -((r * nzvz + sz) / nzvz)
                ENDIF)")
              (("" (replaces -1)
                (("" (case "ZTHR >= abs(nzvz) * TCOA")
                  (("1" (case "rl = Theta_H[ZTHR](sz,nzvz,-1)")
                    (("1" (expand "time_coalt")
                      (("1" (lift-if)
                        (("1"
                          (lemma "vertical_sep_outside_Theta[ZTHR]")
                          (("1" (inst - "nzvz" "sz" "r")
                            (("1" (ground)
                              (("1"
                                (mult-by -2 "abs(nzvz)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (mult-by -8 "-nzvz")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (mult-by -4 "nzvz")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (mult-by -2 "abs(nzvz)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "abs")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (mult-by -8 "-nzvz")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (mult-by -4 "nzvz")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (mult-by -2 "abs(nzvz)")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "abs")
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (ground)
                                        (("1"
                                          (mult-by -8 "-nzvz")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (mult-by -4 "nzvz")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (mult-by -2 "abs(nzvz)")
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "abs")
                                    (("4"
                                      (lift-if)
                                      (("4"
                                        (ground)
                                        (("1"
                                          (mult-by -8 "-nzvz")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (mult-by -4 "nzvz")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Theta_H")
                      (("2" (expand "max")
                        (("2" (lift-if) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (name "H2" "abs(nzvz) * TCOA")
                    (("2" (case "rl = Theta_H[H2](sz,nzvz,-1)")
                      (("1" (hide -4)
                        (("1" (name "tca1" "-(sz/nzvz)")
                          (("1" (case "r < tca1")
                            (("1" (case "(sz + r*nzvz)*nzvz < 0")
                              (("1"
                                (lemma
                                 "vertical_sep_outside_Theta[H2]")
                                (("1"
                                  (inst - "nzvz" "sz" "r")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand "time_coalt")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "Theta_H" -3)
                                            (("1"
                                              (case "nzvz > 0")
                                              (("1"
                                                (expand "sign")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (cross-mult -4)
                                                    (("1"
                                                      (expand "H2")
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -4)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (mult-by
                                                             -3
                                                             "nzvz")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (cross-mult -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "sign")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "H2")
                                                        (("2"
                                                          (mult-by
                                                           -2
                                                           "-nzvz")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "abs"
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "Theta_H_vertical_dir[ZTHR]")
                                        (("2"
                                          (inst - "1" "nzvz" "sz")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -10 :dir rl)
                                              (("2"
                                                (typepred "sq(nzvz)")
                                                (("2"
                                                  (mult-by -2 "r-ru")
                                                  (("2"
                                                    (expand "sq")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         "Theta_H_vertical_dir[H2]")
                                        (("3"
                                          (inst - "1" "nzvz" "sz")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "sq(nzvz)")
                                              (("3"
                                                (mult-by
                                                 -2
                                                 "r - Theta_H[H2](sz,nzvz,1)")
                                                (("3"
                                                  (expand "sq")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (lemma
                                         "Theta_H_vertical_dir[ZTHR]")
                                        (("4"
                                          (inst - "1" "nzvz" "sz")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (replace -10 :dir rl)
                                              (("4"
                                                (typepred "sq(nzvz)")
                                                (("4"
                                                  (mult-by -2 "r-ru")
                                                  (("4"
                                                    (expand "sq")
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (lemma
                                         "Theta_H_vertical_dir[H2]")
                                        (("5"
                                          (inst - "1" "nzvz" "sz")
                                          (("5"
                                            (assert)
                                            (("5"
                                              (typepred "sq(nzvz)")
                                              (("5"
                                                (mult-by
                                                 -2
                                                 "r - Theta_H[H2](sz,nzvz,1)")
                                                (("5"
                                                  (expand "sq")
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (expand "time_coalt")
                                        (("6"
                                          (assert)
                                          (("6"
                                            (lemma
                                             "Theta_H_vertical_dir[H2]")
                                            (("6"
                                              (inst - "1" "nzvz" "sz")
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (typepred "sq(nzvz)")
                                                  (("6"
                                                    (mult-by
                                                     -2
                                                     "r - Theta_H[H2](sz,nzvz,1)")
                                                    (("6"
                                                      (expand "sq")
                                                      (("6"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("7"
                                        (lemma
                                         "Theta_H_vertical_dir[ZTHR]")
                                        (("7"
                                          (inst - "1" "nzvz" "sz")
                                          (("7"
                                            (assert)
                                            (("7"
                                              (typepred "sq(nzvz)")
                                              (("7"
                                                (mult-by -2 "r-ru")
                                                (("7"
                                                  (expand "sq")
                                                  (("7"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("8"
                                        (expand "time_coalt")
                                        (("8"
                                          (lift-if)
                                          (("8"
                                            (assert)
                                            (("8"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (case
                                                   "NOT 0 <= -((r * nzvz + sz) / nzvz)")
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (mult-by
                                                       1
                                                       "sq(nzvz)")
                                                      (("1"
                                                        (expand "sq")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("9"
                                        (expand "time_coalt")
                                        (("9"
                                          (lift-if)
                                          (("9"
                                            (assert)
                                            (("9"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (case
                                                   "NOT 0 <= -((r * nzvz + sz) / nzvz)")
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (mult-by
                                                       1
                                                       "sq(nzvz)")
                                                      (("1"
                                                        (expand "sq")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (invoke
                                                       (case
                                                        "abs(%1) <= (%2)")
                                                       (! -1 2)
                                                       (! 2 2))
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "abs_neg")
                                                        (("2"
                                                          (rewrite
                                                           "abs_div")
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "tca1")
                                (("2"
                                  (mult-by -1 "sq(nzvz)")
                                  (("2"
                                    (expand "sq")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "r > tca1")
                              (("1"
                                (case "(sz + r*nzvz)*nzvz > 0")
                                (("1"
                                  (case "r > rl")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "time_coalt")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lemma
                                                 "vertical_sep_outside_Theta[ZTHR]")
                                                (("1"
                                                  (inst
                                                   -
                                                   "nzvz"
                                                   "sz"
                                                   "r")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by -1 "sq(nzvz)")
                                                (("2"
                                                  (expand "sq")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "vertical_sep_outside_Theta[ZTHR]")
                                                (("3"
                                                  (inst
                                                   -
                                                   "nzvz"
                                                   "sz"
                                                   "r")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "Theta_H_vertical_dir[ZTHR]")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (typepred
                                                             "sq(nzvz)")
                                                            (("3"
                                                              (mult-by
                                                               -2
                                                               "Theta_H[ZTHR](sz,nzvz,-1)-r")
                                                              (("3"
                                                                (expand
                                                                 "sq")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (lemma
                                                 "vertical_sep_outside_Theta[ZTHR]")
                                                (("4"
                                                  (inst
                                                   -
                                                   "nzvz"
                                                   "sz"
                                                   "r")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (lemma
                                                       "Theta_H_vertical_dir[ZTHR]")
                                                      (("4"
                                                        (inst
                                                         -
                                                         "-1"
                                                         "nzvz"
                                                         "sz")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (typepred
                                                             "sq(nzvz)")
                                                            (("4"
                                                              (mult-by
                                                               -2
                                                               "Theta_H[ZTHR](sz,nzvz,-1)-r")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (expand
                                                                   "sq")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "rl < tca1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -4 1)
                                      (("2"
                                        (expand "Theta_H" 1)
                                        (("2"
                                          (expand "tca1")
                                          (("2"
                                            (cross-mult 1)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "sign")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "sign")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "tca1")
                                  (("2"
                                    (mult-by -1 "sq(nzvz)")
                                    (("2"
                                      (expand "sq")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "r = tca1")
                                  (("1"
                                    (case "sz + r*nzvz = 0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "time_coalt")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "FORALL (egv1:posreal): Theta_H[egv1](sz,nzvz,-1) <= r AND r<=Theta_H[egv1](sz,nzvz,1)")
                                            (("1"
                                              (inst-cp - "H2")
                                              (("1"
                                                (inst - "ZTHR")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma
                                                 "vertical_sep_outside_Theta[egv1]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst - "r")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "Theta_H")
                        (("2" (expand "max")
                          (("2" (lift-if) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (coalt_entry_exit const-decl
     "{r12: [real, real] | LET (r1, r2) = r12 IN r1 < r2}" vertical_WCV
     nil)
    (vertical_WCV_at const-decl "bool" vertical_WCV nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ZTHR formal-const-decl "posreal" vertical_WCV nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" vertical_WCV nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (time_coalt skolem-const-decl "numfield" vertical_WCV nil)
    (vertical_sep_outside_Theta formula-decl nil vertical "ACCoRD/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (Theta_H const-decl "real" vertical "ACCoRD/")
    (Sign type-eq-decl nil sign "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_neg_lt1 formula-decl nil extra_real_props nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (H2 skolem-const-decl "nnreal" vertical_WCV nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (sign const-decl "Sign" sign "reals/")
    (nzvz skolem-const-decl "nzreal" vertical_WCV nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (Theta_H_vertical_dir formula-decl nil vertical "ACCoRD/")
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (abs_neg formula-decl nil abs_lems "reals/")
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (tca1 skolem-const-decl "real" vertical_WCV nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vertical_WCV_rewrite formula-decl nil vertical_WCV nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   shostak))
 (vertical_WCV_interval_TCC1 0
  (vertical_WCV_interval_TCC1-1 nil 3592555178
   ("" (skeep)
    (("" (expand "max")
      (("" (expand "min")
        (("" (lift-if)
          (("" (lift-if) (("" (lift-if) (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (vertical_WCV_interval_TCC2 0
  (vertical_WCV_interval_TCC2-1 nil 3592555178 ("" (skeep*) nil nil)
   nil nil))
 (vertical_WCV_interval_TCC3 0
  (vertical_WCV_interval_TCC3-1 nil 3592555178
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (vertical_WCV_interval_TCC4 0
  (vertical_WCV_interval_TCC4-1 nil 3592556636
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (vertical_WCV_interval_TCC5 0
  (vertical_WCV_interval_TCC5-1 nil 3592566203
   ("" (skeep*) (("" (min_max) (("" (assert) nil nil)) nil)) nil)
   ((le_max formula-decl nil real_defs nil)
    (max_ge formula-decl nil real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (vertical_WCV_interval_TCC6 0
  (vertical_WCV_interval_TCC6-1 nil 3592566308
   ("" (skeep*) (("" (min_max) (("" (assert) nil nil)) nil)) nil)
   ((le_min formula-decl nil real_defs nil)
    (min_ge formula-decl nil real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (vertical_WCV_interval_def 0
  (vertical_WCV_interval_def-1 nil 3592555671
   ("" (skeep*)
    (("" (case "vz = 0")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (expand "vertical_WCV_at")
            (("1" (expand "vertical_WCV")
              (("1" (expand "tcoa")
                (("1" (expand "vertical_WCV_interval")
                  (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (label "vzz" 1)
        (("2" (skoletin 2)
          (("2" (split)
            (("1" (lemma "coalt_entry_exit_def")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (flatten)
                        (("1" (replaces -3)
                          (("1" (expand "vertical_WCV_interval")
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "max")
                                  (("1"
                                    (lift-if)
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "min")
                                  (("2"
                                    (lift-if)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "coalt_entry_exit_def")
                (("2" (inst?)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (replace -3)
                          (("1" (hide -3)
                            (("1" (assert)
                              (("1"
                                (expand "vertical_WCV_interval")
                                (("1"
                                  (lift-if)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vertical_WCV const-decl "bool" vertical_WCV nil)
    (vertical_WCV_interval const-decl "EntryExit[B, T]" vertical_WCV
     nil)
    (tcoa const-decl "real" timevars nil)
    (vertical_WCV_at const-decl "bool" vertical_WCV nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (coalt_entry_exit_def formula-decl nil vertical_WCV nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (vz skolem-const-decl "real" vertical_WCV nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

