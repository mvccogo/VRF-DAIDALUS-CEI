(WCV_taumod
 (WCV_taumod_symmetric 0
  (WCV_taumod_symmetric-1 nil 3606387770
   ("" (rewrite "WCV_symmetric") (("" (rewrite "taumod_symm") nil nil))
    nil)
   ((taumod_symm formula-decl nil horizontal_WCV_taumod nil)
    (ZTHR formal-const-decl "posreal" WCV_taumod nil)
    (DTHR formal-const-decl "posreal" WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_taumod nil)
    (TAUMOD formal-const-decl "nnreal" WCV_taumod nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (WCV_symmetric formula-decl nil WCV nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_taumod
     nil))
   shostak))
 (WCV_taumod_local_convexity 0
  (WCV_taumod_local_convexity-1 nil 3606146717
   ("" (rewrite "WCV_locally_convex")
    (("" (inst 1 "horizontal_WCV_taumod_interval")
      (("" (lemma "horizontal_WCV_taumod_interval_correct")
        (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (horizontal_WCV_taumod_interval_correct formula-decl nil
     horizontal_WCV_taumod nil)
    (ZTHR formal-const-decl "posreal" WCV_taumod nil)
    (DTHR formal-const-decl "posreal" WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_taumod nil)
    (TAUMOD formal-const-decl "nnreal" WCV_taumod nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (WCV_locally_convex formula-decl nil WCV nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_taumod
     nil))
   shostak))
 (WCV_taumod_interval_TCC1 0
  (WCV_taumod_interval_TCC1-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   nil nil))
 (WCV_taumod_interval_correct 0
  (WCV_taumod_interval_correct-1 nil 3625245618
   ("" (skeep*)
    (("" (beta)
      (("" (lemma "WCV_interval_correct")
        (("" (inst?)
          (("" (inst?)
            (("1" (ground) nil nil)
             ("2" (hide 2)
              (("2" (lemma "horizontal_WCV_taumod_interval_correct")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_taumod nil)
    (< const-decl "bool" reals nil)
    (B skolem-const-decl "nnreal" WCV_taumod nil)
    (T skolem-const-decl "posreal" WCV_taumod nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (horizontal_WCV_taumod_interval_correct formula-decl nil
     horizontal_WCV_taumod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (WCV_interval_correct formula-decl nil WCV nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TAUMOD formal-const-decl "nnreal" WCV_taumod nil)
    (TCOA formal-const-decl "nnreal" WCV_taumod nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" WCV_taumod nil)
    (ZTHR formal-const-decl "posreal" WCV_taumod nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (WCV_taumod_detection_correct 0
  (WCV_taumod_detection_correct-1 nil 3625245863
   ("" (skeep)
    (("" (lemma "WCV_detection_correct")
      (("" (inst?)
        (("" (lemma "horizontal_WCV_taumod_interval_correct")
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ZTHR formal-const-decl "posreal" WCV_taumod nil)
    (DTHR formal-const-decl "posreal" WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_taumod nil)
    (TAUMOD formal-const-decl "nnreal" WCV_taumod nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (WCV_detection_correct formula-decl nil WCV nil)
    (horizontal_WCV_taumod_interval_correct formula-decl nil
     horizontal_WCV_taumod nil)
    (horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (T skolem-const-decl "posreal" WCV_taumod nil)
    (B skolem-const-decl "nnreal" WCV_taumod nil)
    (< const-decl "bool" reals nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_taumod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)))

