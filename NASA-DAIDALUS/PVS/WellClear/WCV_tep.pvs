% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

WCV_tep[TEP,TCOA:nnreal,DTHR,ZTHR:posreal]  : THEORY 

% TEP is the time to entry point threshold
% TCOA is the time to co-altitude threshold
% DTHR is the distance threshold
% ZTHR is the altitude threshold

BEGIN

  IMPORTING horizontal_WCV_tep[TEP,DTHR],
  	    WCV[TEP,TCOA,DTHR,ZTHR],
	    vectors@vectors_3D,
  	    ACCoRD@cd3d

  s,v : VAR Vect3  
  B   : VAR nnreal
  T   : VAR posreal

  WCV_tep(s,v): MACRO bool =
     WCV(tep)(s,v)

  WCV_tep_symmetric : THEOREM
    WCV_symmetric?(tep)

  WCV_tep_local_convexity: THEOREM
    WCV_locally_convex?(tep)

  WCV_tep_interval(B,(T|B<T),s,v): MACRO EntryExit[B,T] = 
    WCV_interval(tep,horizontal_WCV_tep_interval)(B,T,s,v)

  WCV_tep_interval_correct: LEMMA B<T IMPLIES
    FORALL (t:Lookahead[B,T]):
      LET interval = WCV_tep_interval(B,T,s,v),
          tentry = interval`entry,
	  texit  = interval`exit IN
      WCV_tep(s+t*v,v) IFF (tentry<=t AND t<=texit)

  WCV_tep_detection(B,T,s,v): MACRO bool =
    WCV_detection(tep,horizontal_WCV_tep_interval)(B,T,s,v)

  WCV_tep_detection_correct: LEMMA B<T IMPLIES
    (WCV_tep_detection(B,T,s,v) IFF
    (EXISTS (t:Lookahead[B,T]): WCV_tep(s+t*v,v)))

END WCV_tep
