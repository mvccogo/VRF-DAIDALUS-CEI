(WCV_tau
 (WCV_tau_symmetric 0
  (WCV_tau_symmetric-1 nil 3606225968
   ("" (rewrite "WCV_symmetric")
    (("" (rewrite "safe_tau_symm") nil nil)) nil)
   ((safe_tau_symm formula-decl nil horizontal_WCV_tau nil)
    (ZTHR formal-const-decl "posreal" WCV_tau nil)
    (DTHR formal-const-decl "posreal" WCV_tau nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_tau nil)
    (TAU formal-const-decl "nnreal" WCV_tau nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (WCV_symmetric formula-decl nil WCV nil)
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil))
   shostak))
 (WCV_tau_cex_91 0
  (WCV_tau_cex_91-1 nil 3606591142
   ("" (flatten)
    (("" (skoletin*)
      (("" (lemma "sin_pi2")
        (("" (lemma "cos_pi2")
          (("" (expand "WCV")
            (("" (expand "Vo")
              (("" (expand "Vi")
                (("" (expand "So")
                  (("" (expand "Si")
                    (("" (expand "vel_from_TrkGsVs")
                      (("" (expand "deg")
                        (("" (case-replace "90*(pi/180) = pi/2")
                          (("1" (rewrite "sin_pi2")
                            (("1" (rewrite "cos_pi2")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replaces
                                   :from
                                   -2
                                   :to
                                   -4
                                   :in
                                   -1
                                   :hide?
                                   nil)
                                  (("1"
                                    (hide -3 -4)
                                    (("1"
                                      (expand* "+" "-" "*")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "horizontal_WCV")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (name-label
                                                 "s2"
                                                 "vect2(st)"
                                                 :dir
                                                 rl
                                                 :label
                                                 none)
                                                (("1"
                                                  (name-label
                                                   "v2"
                                                   "vect2(v0)"
                                                   :dir
                                                   rl
                                                   :label
                                                   none)
                                                  (("1"
                                                    (replaces (-3 -4))
                                                    (("1"
                                                      (expand "vect2")
                                                      (("1"
                                                        (name-label
                                                         "s2_v2"
                                                         "s2*v2"
                                                         :dir
                                                         rl
                                                         :hide?
                                                         nil
                                                         :label
                                                         none)
                                                        (("1"
                                                          (copy -1)
                                                          (("1"
                                                            (replaces
                                                             (-3 -4)
                                                             :in
                                                             -1
                                                             :hide?
                                                             nil)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               -1)
                                                              (("1"
                                                                (numerical
                                                                 (!
                                                                  -1
                                                                  r))
                                                                (("1"
                                                                  (replaces
                                                                   -2
                                                                   :in
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (case
                                                                     "s2_v2 < 0")
                                                                    (("1"
                                                                      (case-replace
                                                                       "v2=zero")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "vectors_2D.sqv_eq_0")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "v2")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "tcpa")
                                                                              (("2"
                                                                                (expand
                                                                                 "safe_tau")
                                                                                (("2"
                                                                                  (replaces
                                                                                   (-6
                                                                                    -7))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "horizontal_tca")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sqv_add")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "sqv_scal")
                                                                                        (("2"
                                                                                          (name-label
                                                                                           "sq_s2"
                                                                                           "sqv(s2)"
                                                                                           :hide?
                                                                                           nil
                                                                                           :label
                                                                                           none
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (copy
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -7
                                                                                               :in
                                                                                               -1
                                                                                               :hide?
                                                                                               nil)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sqv"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (numerical
                                                                                                     (!
                                                                                                      -1
                                                                                                      r))
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -2
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (name-label
                                                                                                         "sq_v2"
                                                                                                         "sqv(v2)"
                                                                                                         :hide?
                                                                                                         nil
                                                                                                         :label
                                                                                                         none
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (copy
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -8
                                                                                                             :in
                                                                                                             -1
                                                                                                             :hide?
                                                                                                             nil)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "sqv"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "*"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (numerical
                                                                                                                   (!
                                                                                                                    -1
                                                                                                                    r))
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (name-label
                                                                                                                       "Tau"
                                                                                                                       "tau(s2,v2)"
                                                                                                                       :hide?
                                                                                                                       nil
                                                                                                                       :label
                                                                                                                       none
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "tau"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -9
                                                                                                                           -10
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             (-3
                                                                                                                              -5
                                                                                                                              -8)
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (numerical
                                                                                                                               (!
                                                                                                                                -1
                                                                                                                                r))
                                                                                                                              (("2"
                                                                                                                                (replaces
                                                                                                                                 -2
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "##"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (interval
                                                                                                                                           2)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -)
                                          (("2"
                                            (expand "vertical_WCV")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (Si const-decl "Vect3" WCV_tau nil)
    (So const-decl "Vect3" WCV_tau nil)
    (Vi const-decl "Vect3" WCV_tau nil)
    (Vo const-decl "Vect3" WCV_tau nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (WCV const-decl "bool" WCV nil)
    (ZTHR formal-const-decl "posreal" WCV_tau nil)
    (DTHR formal-const-decl "posreal" WCV_tau nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_tau nil)
    (TAU formal-const-decl "nnreal" WCV_tau nil)
    (nnreal type-eq-decl nil real_types nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (cos_pi2 formula-decl nil sincos "trig/")
    (sin_range application-judgement "real_abs_le1" sincos "trig/")
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (vel_from_TrkGsVs const-decl "Vect3" units "TCASII/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (vertical_WCV const-decl "bool" vertical_WCV nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (tcpa const-decl "real" timevars nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (sqv_add formula-decl nil vectors_2D "vectors/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (dot_scal_canon formula-decl nil vectors_2D "vectors/")
    (tau const-decl "real" timevars nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nml_89 skolem-const-decl "(add?)" WCV_tau nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     "interval_arith/")
    (X const-decl "RealExpr" interval_expr "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (s2_v2 skolem-const-decl "real" WCV_tau nil)
    (sq_s2 skolem-const-decl "nnreal" WCV_tau nil)
    (vars_in_box formula-decl nil box "interval_arith/")
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box "interval_arith/")
    (nml_90 skolem-const-decl "(div?)" WCV_tau nil)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     "interval_arith/")
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     "interval_arith/")
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (interval_soundness formula-decl nil interval_bandb
     "interval_arith/")
    (sound? const-decl "bool" interval_bandb "interval_arith/")
    (iar_91 skolem-const-decl "(brel?)" WCV_tau nil)
    (beval def-decl "bool" interval_bexpr "interval_arith/")
    (sq_v2 skolem-const-decl "nnreal" WCV_tau nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (alt_max const-decl "DirVar" gbandb_boolexpr "interval_arith/")
    (interval const-decl "Output" interval_bandb "interval_arith/")
    (IntervalOutput type-eq-decl nil gbandb_boolexpr "interval_arith/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (BoolExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (Maybe type-decl nil Maybe "structures/")
    (nml_88 skolem-const-decl "(add?)" WCV_tau nil)
    (sqv_scal formula-decl nil vectors_2D "vectors/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (lb_interval formula-decl nil interval "interval_arith/")
    (ub_interval formula-decl nil interval "interval_arith/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     "interval_arith/")
    (hour const-decl "posreal" units "TCASII/")
    (nml_87 skolem-const-decl "(add?)" WCV_tau nil)
    (sin const-decl "real" sincos_def "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval def-decl "real" interval_expr "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" simple_bandb
     "interval_arith/")
    (Env type-eq-decl nil box "interval_arith/")
    (vars_in_box? const-decl "bool" box "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list2array def-decl "T" array2list "structures/")
    (kts const-decl "posreal" units "TCASII/")
    (nmi const-decl "posreal" units "TCASII/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sound? const-decl "bool" numerical_bandb "interval_arith/")
    (numerical_soundness formula-decl nil numerical_bandb
     "interval_arith/")
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box "interval_arith/")
    (ProperBox type-eq-decl nil box "interval_arith/")
    (IntervalMinMax type-eq-decl nil numerical_bandb "interval_arith/")
    (ProperBox? const-decl "bool" box "interval_arith/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (stack type-eq-decl nil stack "structures/")
    (length def-decl "nat" list_props nil)
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (Output type-eq-decl nil branch_and_bound "structures/")
    (numerical const-decl "Output" numerical_bandb "interval_arith/")
    (altdir_maxvar const-decl "DirVar" numerical_bandb
     "interval_arith/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (COS_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (PI_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt "interval_arith/")
    (SIN_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (r2E const-decl "RealExpr" interval_expr "interval_arith/")
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt "interval_arith/")
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt "interval_arith/")
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt "interval_arith/")
    (RealExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt "interval_arith/")
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (deg const-decl "posreal" units "TCASII/")
    (sin_pi2 formula-decl nil sincos "trig/"))
   nil))
 (WCV_tau_cex_98 0
  (WCV_tau_cex_98-2 nil 3606592550
   ("" (flatten)
    (("" (skoletin*)
      (("" (lemma "sin_pi2")
        (("" (lemma "cos_pi2")
          (("" (expand "WCV")
            (("" (flatten)
              (("" (hide -4)
                (("" (expand "Vo")
                  (("" (expand "Vi")
                    (("" (expand "So")
                      (("" (expand "Si")
                        (("" (expand "vel_from_TrkGsVs")
                          (("" (expand "deg")
                            (("" (case-replace "90*(pi/180) = pi/2")
                              (("1"
                                (rewrite "sin_pi2")
                                (("1"
                                  (rewrite "cos_pi2")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (replaces
                                       :from
                                       -3
                                       :to
                                       -5
                                       :in
                                       -2
                                       :hide?
                                       nil)
                                      (("1"
                                        (hide -4 -5)
                                        (("1"
                                          (expand* "+" "-" "*")
                                          (("1"
                                            (expand "horizontal_WCV")
                                            (("1"
                                              (name-label
                                               "s2"
                                               "vect2(st)"
                                               :dir
                                               rl
                                               :label
                                               none)
                                              (("1"
                                                (name-label
                                                 "v2"
                                                 "vect2(v0)"
                                                 :dir
                                                 rl
                                                 :label
                                                 none)
                                                (("1"
                                                  (replaces :from -4)
                                                  (("1"
                                                    (expand "vect2")
                                                    (("1"
                                                      (name-label
                                                       "s2_v2"
                                                       "s2*v2"
                                                       :dir
                                                       rl
                                                       :hide?
                                                       nil
                                                       :label
                                                       none)
                                                      (("1"
                                                        (copy -1)
                                                        (("1"
                                                          (replaces
                                                           (-3 -4)
                                                           :in
                                                           -1
                                                           :hide?
                                                           nil)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             -1)
                                                            (("1"
                                                              (numerical
                                                               (!
                                                                -1
                                                                r))
                                                              (("1"
                                                                (replaces
                                                                 -2
                                                                 :in
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (case
                                                                   "s2_v2 < 0")
                                                                  (("1"
                                                                    (case-replace
                                                                     "v2=zero")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "vectors_2D.sqv_eq_0")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "v2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "safe_tau")
                                                                            (("2"
                                                                              (name-label
                                                                               "sq_s2"
                                                                               "sqv(s2)"
                                                                               :hide?
                                                                               nil
                                                                               :label
                                                                               none
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (copy
                                                                                 -1)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -7
                                                                                   :in
                                                                                   -1
                                                                                   :hide?
                                                                                   nil)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sqv"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "*"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (numerical
                                                                                         (!
                                                                                          -1
                                                                                          r))
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -2
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (split
                                                                                             -8)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -2))
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (name-label
                                                                                                   "Tau"
                                                                                                   "tau(s2,v2)"
                                                                                                   :dir
                                                                                                   rl
                                                                                                   :hide?
                                                                                                   nil
                                                                                                   :label
                                                                                                   none)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "tau")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       (-5
                                                                                                        -8)
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (numerical
                                                                                                         (!
                                                                                                          -1
                                                                                                          r))
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "##"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Si const-decl "Vect3" WCV_tau nil)
    (So const-decl "Vect3" WCV_tau nil)
    (Vi const-decl "Vect3" WCV_tau nil)
    (Vo const-decl "Vect3" WCV_tau nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (WCV const-decl "bool" WCV nil)
    (ZTHR formal-const-decl "posreal" WCV_tau nil)
    (DTHR formal-const-decl "posreal" WCV_tau nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_tau nil)
    (TAU formal-const-decl "nnreal" WCV_tau nil)
    (nnreal type-eq-decl nil real_types nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (cos_pi2 formula-decl nil sincos "trig/")
    (sin_range application-judgement "real_abs_le1" sincos "trig/")
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (vel_from_TrkGsVs const-decl "Vect3" units "TCASII/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (IntervalExpr type-decl nil IntervalExpr_adt "interval_arith/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (RealExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt "interval_arith/")
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt "interval_arith/")
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt "interval_arith/")
    (r2E const-decl "RealExpr" interval_expr "interval_arith/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (SIN_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt "interval_arith/")
    (PI_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (COS_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (FALSE const-decl "bool" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (altdir_maxvar const-decl "DirVar" numerical_bandb
     "interval_arith/")
    (numerical const-decl "Output" numerical_bandb "interval_arith/")
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox? const-decl "bool" box "interval_arith/")
    (IntervalMinMax type-eq-decl nil numerical_bandb "interval_arith/")
    (ProperBox type-eq-decl nil box "interval_arith/")
    (Box type-eq-decl nil box "interval_arith/")
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (numerical_soundness formula-decl nil numerical_bandb
     "interval_arith/")
    (sound? const-decl "bool" numerical_bandb "interval_arith/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nmi const-decl "posreal" units "TCASII/")
    (kts const-decl "posreal" units "TCASII/")
    (list2array def-decl "T" array2list "structures/")
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vars_in_box? const-decl "bool" box "interval_arith/")
    (Env type-eq-decl nil box "interval_arith/")
    (listn_0 name-judgement "listn[real](0)" simple_bandb
     "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval def-decl "real" interval_expr "interval_arith/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def "trig/")
    (nml_92 skolem-const-decl "(add?)" WCV_tau nil)
    (hour const-decl "posreal" units "TCASII/")
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     "interval_arith/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (|##| const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (tau const-decl "real" timevars nil)
    (tcpa const-decl "real" timevars nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nml_94 skolem-const-decl "(div?)" WCV_tau nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box "interval_arith/")
    (vars_in_box formula-decl nil box "interval_arith/")
    (sq_s2 skolem-const-decl "nnreal" WCV_tau nil)
    (s2_v2 skolem-const-decl "real" WCV_tau nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (X const-decl "RealExpr" interval_expr "interval_arith/")
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     "interval_arith/")
    (nml_93 skolem-const-decl "(add?)" WCV_tau nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (deg const-decl "posreal" units "TCASII/")
    (sin_pi2 formula-decl nil sincos "trig/"))
   nil)
  (WCV_tau_cex_98-1 nil 3606592531 ("" (postpone) nil nil) nil
   shostak))
 (WCV_tau_cex_105 0
  (WCV_tau_cex_105-1 nil 3606592186
   ("" (flatten)
    (("" (skoletin*)
      (("" (lemma "sin_pi2")
        (("" (lemma "cos_pi2")
          (("" (expand "WCV")
            (("" (expand "Vo")
              (("" (expand "Vi")
                (("" (expand "So")
                  (("" (expand "Si")
                    (("" (expand "vel_from_TrkGsVs")
                      (("" (expand "deg")
                        (("" (case-replace "90*(pi/180) = pi/2")
                          (("1" (rewrite "sin_pi2")
                            (("1" (rewrite "cos_pi2")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replaces
                                   :from
                                   -2
                                   :to
                                   -4
                                   :in
                                   -1
                                   :hide?
                                   nil)
                                  (("1"
                                    (hide -3 -4)
                                    (("1"
                                      (expand* "+" "-" "*")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "horizontal_WCV")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "vect2")
                                                    (("1"
                                                      (rewrite
                                                       "sqv_sos")
                                                      (("1"
                                                        (expand "sos")
                                                        (("1"
                                                          (interval)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -)
                                          (("2"
                                            (expand "vertical_WCV")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Si const-decl "Vect3" WCV_tau nil)
    (So const-decl "Vect3" WCV_tau nil)
    (Vi const-decl "Vect3" WCV_tau nil)
    (Vo const-decl "Vect3" WCV_tau nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (WCV const-decl "bool" WCV nil)
    (ZTHR formal-const-decl "posreal" WCV_tau nil)
    (DTHR formal-const-decl "posreal" WCV_tau nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_tau nil)
    (TAU formal-const-decl "nnreal" WCV_tau nil)
    (nnreal type-eq-decl nil real_types nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (cos_pi2 formula-decl nil sincos "trig/")
    (sin_range application-judgement "real_abs_le1" sincos "trig/")
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (vel_from_TrkGsVs const-decl "Vect3" units "TCASII/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (vertical_WCV const-decl "bool" vertical_WCV nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nmi const-decl "posreal" units "TCASII/")
    (kts const-decl "posreal" units "TCASII/")
    (sin const-decl "real" sincos_def "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sqv_sos formula-decl nil vectors_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (SIN_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (PI_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt "interval_arith/")
    (COS_n const-decl "RealExpr" interval_expr_trig "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (r2E const-decl "RealExpr" interval_expr "interval_arith/")
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt "interval_arith/")
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt "interval_arith/")
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     "interval_arith/")
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt "interval_arith/")
    (<= const-decl "bool" reals nil)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     "interval_arith/")
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (RealExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RealOrder type-eq-decl nil real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (IntervalExpr type-decl nil IntervalExpr_adt "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (interval_soundness formula-decl nil interval_bandb
     "interval_arith/")
    (sound? const-decl "bool" interval_bandb "interval_arith/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (iar_95 skolem-const-decl "(brel?)" WCV_tau nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     "interval_arith/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (eval def-decl "real" interval_expr "interval_arith/")
    (beval def-decl "bool" interval_bexpr "interval_arith/")
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (list2array def-decl "T" array2list "structures/")
    (vars_in_box? const-decl "bool" box "interval_arith/")
    (Env type-eq-decl nil box "interval_arith/")
    (FALSE const-decl "bool" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (alt_max const-decl "DirVar" gbandb_boolexpr "interval_arith/")
    (interval const-decl "Output" interval_bandb "interval_arith/")
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox type-eq-decl nil box "interval_arith/")
    (ProperBox? const-decl "bool" box "interval_arith/")
    (Box type-eq-decl nil box "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (IntervalOutput type-eq-decl nil gbandb_boolexpr "interval_arith/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (listn_0 name-judgement "listn[real](0)" simple_bandb
     "interval_arith/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (sos const-decl "nnreal" vectors_2D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (deg const-decl "posreal" units "TCASII/")
    (sin_pi2 formula-decl nil sincos "trig/"))
   nil))
 (WCV_tau_non_symmetric 0
  (WCV_tau_non_symmetric-1 nil 3606597194
   ("" (flatten)
    (("" (expand "WCV_locally_convex?")
      (("" (inst - "0" "110" "So-Si" "Vo-Vi")
        (("" (inst 1 "91" "91+7" "91+7+7")
          (("" (assert)
            (("" (lemma "WCV_tau_cex_91")
              (("" (assert)
                (("" (lemma "WCV_tau_cex_98")
                  (("" (assert)
                    (("" (lemma "WCV_tau_cex_105")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((WCV_locally_convex? const-decl "bool" WCV nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (<= const-decl "bool" reals nil)
    (WCV_tau_cex_91 formula-decl nil WCV_tau nil)
    (WCV_tau_cex_98 formula-decl nil WCV_tau nil)
    (WCV_tau_cex_105 formula-decl nil WCV_tau nil)
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vi const-decl "Vect3" WCV_tau nil)
    (Vo const-decl "Vect3" WCV_tau nil)
    (Si const-decl "Vect3" WCV_tau nil)
    (So const-decl "Vect3" WCV_tau nil)
    (- const-decl "Vector" vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (WCV_tau_interval_TCC1 0
  (WCV_tau_interval_TCC1-1 nil 3626605788 ("" (subtype-tcc) nil nil)
   nil nil))
 (WCV_tau_interval_sound_TCC1 0
  (WCV_tau_interval_sound_TCC1-1 nil 3626605788
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tau_interval_sound 0
  (WCV_tau_interval_sound-1 nil 3629557121
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "WCV_interval_sound")
        (("" (inst?)
          (("" (hide 2)
            (("" (lemma "horizontal_WCV_tau_interval_sound")
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (horizontal_WCV_tau_interval const-decl
     "[# entry: Lookahead[0, T], exit: Lookahead[0, T] #]"
     horizontal_WCV_tau nil)
    (horizontal_WCV_tau_interval_sound formula-decl nil
     horizontal_WCV_tau nil)
    (WCV_interval_sound formula-decl nil WCV nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TAU formal-const-decl "nnreal" WCV_tau nil)
    (TCOA formal-const-decl "nnreal" WCV_tau nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" WCV_tau nil)
    (ZTHR formal-const-decl "posreal" WCV_tau nil))
   shostak))
 (WCV_tau_detection_correct 0
  (WCV_tau_detection_correct-1 nil 3630412416
   ("" (skeep)
    (("" (lemma "WCV_tau_interval_sound")
      (("" (inst?)
        (("" (assert)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "WCV_detection")
                (("1"
                  (inst -
                   "WCV_interval(safe_tau, horizontal_WCV_tau_interval)(B, T, s, v)`entry")
                  (("1" (assert)
                    (("1" (expand "nonempty?")
                      (("1"
                        (inst -
                         "WCV_interval(safe_tau, horizontal_WCV_tau_interval)(B, T, s, v)`entry")
                        (("1" (assert) (("1" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (inst - "t")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (split -3)
                        (("1" (assert)
                          (("1" (expand "nonempty?")
                            (("1" (expand "WCV_detection")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((WCV_tau_interval_sound formula-decl nil WCV_tau nil)
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_tau nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (TAU formal-const-decl "nnreal" WCV_tau nil)
    (DTHR formal-const-decl "posreal" WCV_tau nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (< const-decl "bool" reals nil)
    (TCOA formal-const-decl "nnreal" WCV_tau nil)
    (ZTHR formal-const-decl "posreal" WCV_tau nil)
    (WCV_interval const-decl "EntryExit[B, T]" WCV nil)
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (horizontal_WCV_tau_interval const-decl
     "[# entry: Lookahead[0, T], exit: Lookahead[0, T] #]"
     horizontal_WCV_tau nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (WCV_detection const-decl "bool" WCV nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

