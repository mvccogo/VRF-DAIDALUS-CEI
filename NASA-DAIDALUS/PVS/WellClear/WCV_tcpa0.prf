(WCV_tcpa0
 (WCV_tcpa0_interval_TCC1 0
  (WCV_tcpa0_interval_TCC1-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_TCC2 0
  (WCV_tcpa0_interval_TCC2-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_TCC3 0
  (WCV_tcpa0_interval_TCC3-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (HMD formal-const-decl "posreal" WCV_tcpa0 nil)
    (DMOD formal-const-decl "posreal" WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_TCC4 0
  (WCV_tcpa0_interval_TCC4-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (HMD formal-const-decl "posreal" WCV_tcpa0 nil)
    (DMOD formal-const-decl "posreal" WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_TCC5 0
  (WCV_tcpa0_interval_TCC5-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (HMD formal-const-decl "posreal" WCV_tcpa0 nil)
    (DMOD formal-const-decl "posreal" WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_TCC6 0
  (WCV_tcpa0_interval_TCC6-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (HMD formal-const-decl "posreal" WCV_tcpa0 nil)
    (DMOD formal-const-decl "posreal" WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_TCC7 0
  (WCV_tcpa0_interval_TCC7-1 nil 3592566133 ("" (subtype-tcc) nil nil)
   ((Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (HMD formal-const-decl "posreal" WCV_tcpa0 nil)
    (DMOD formal-const-decl "posreal" WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil))
 (WCV_tcpa0_interval_def 0
  (WCV_tcpa0_interval_def-2 nil 3594748290
   ("" (skeep)
    (("" (skeep)
      (("" (skoletin 1)
        (("" (skoletin 1)
          (("" (label "final" 1)
            (("" (expand "WCV_tcpa0_interval" :assert? none)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (replaces -2)
                          (("1" (replaces -2)
                            (("1" (replaces -2)
                              (("1"
                                (assert)
                                (("1"
                                  (invoke (case "%1") (! 1 2))
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replaces 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "WCV_tcpa0")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma
                                             "vertical_WCV_interval_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst - "t")
                                                  (("2"
                                                    (expand
                                                     "vertical_WCV_at")
                                                    (("2"
                                                      (rewrite
                                                       "vz_distr_add")
                                                      (("2"
                                                        (rewrite
                                                         "vz_scal")
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (invoke (name "tz" "%1") (! -1 1))
                              (("1"
                                (replace -1)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "t = tz")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "WCV_tcpa0" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma
                                             "vertical_WCV_interval_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst - "t")
                                                  (("2"
                                                    (expand
                                                     "vertical_WCV_at")
                                                    (("2"
                                                      (rewrite
                                                       "vz_distr_add")
                                                      (("2"
                                                        (rewrite
                                                         "vz_scal")
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "WCV_tcpa0" 1)
                                      (("2"
                                        (rewrite "vect2_add")
                                        (("2"
                                          (rewrite "vect2_scal")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "vertical_WCV_interval_def")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "t")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "vertical_WCV_at")
                                                        (("2"
                                                          (rewrite
                                                           "vz_distr_add")
                                                          (("2"
                                                            (rewrite
                                                             "vz_scal")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (replaces -2)
                                        (("1"
                                          (replaces -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (invoke
                                               (case "%1")
                                               (! 3 2))
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (replaces 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "WCV_tcpa0")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "vertical_WCV_interval_def")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "t")
                                                              (("2"
                                                                (expand
                                                                 "vertical_WCV_at")
                                                                (("2"
                                                                  (rewrite
                                                                   "vz_distr_add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "vz_scal")
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (rewrite
                                                                             "vect2_add")
                                                                            (("2"
                                                                              (rewrite
                                                                               "vect2_scal")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (name
                                       "vni"
                                       "vertical_WCV_interval(B, T, s`z, v`z)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (name
                                           "hni"
                                           "horizontal_WCV_tcpa0_interval(vni`exit - vni`entry,
                                                                 vect2(s) + vni`entry * vect2(v),
                                                                 vect2(v))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (replaces -3)
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "WCV_tcpa0")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "vertical_WCV_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "t")
                                                                      (("1"
                                                                        (expand
                                                                         "vertical_WCV_at")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vz_distr_add")
                                                                          (("1"
                                                                            (rewrite
                                                                             "vz_scal")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "horizontal_WCV_tcpa0_interval_def")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "t-vni`entry")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "vect2(s) + vni`entry * vect2(v) +
                                                                (t - vni`entry) * vect2(v) = vect2(s + t * v)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "WCV_tcpa0")
                                                          (("2"
                                                            (split +)
                                                            (("1"
                                                              (lemma
                                                               "vertical_WCV_interval_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "t")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "horizontal_WCV_tcpa0_interval_def")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "t-vni`entry")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "vect2(s) + vni`entry * vect2(v) +
                                                            (t - vni`entry) * vect2(v) = vect2(s + t * v)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "vertical_WCV_interval_def")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "t")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "vertical_WCV")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_WCV_interval const-decl "EntryExit[B, T]" vertical_WCV
     nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (vect2_scal formula-decl nil vect_3D_2D "vectors/")
    (vect2_add formula-decl nil vect_3D_2D "vectors/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (TCPA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (DMOD formal-const-decl "posreal" WCV_tcpa0 nil)
    (HMD formal-const-decl "posreal" WCV_tcpa0 nil)
    (horizontal_WCV_tcpa0_interval const-decl
     "[# entry: Lookahead[0, T], exit: Lookahead[0, T] #]"
     horizontal_WCV_tcpa0 nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_WCV_tcpa0_interval_def formula-decl nil
     horizontal_WCV_tcpa0 nil)
    (B skolem-const-decl "nnreal" WCV_tcpa0 nil)
    (T skolem-const-decl "posreal" WCV_tcpa0 nil)
    (t skolem-const-decl "Lookahead[B, T]" WCV_tcpa0 nil)
    (vni skolem-const-decl "EntryExit[B, T]" WCV_tcpa0 nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (vz_distr_add formula-decl nil vectors_3D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vz_scal formula-decl nil vectors_3D "vectors/")
    (vertical_WCV_at const-decl "bool" vertical_WCV nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ZTHR formal-const-decl "posreal" WCV_tcpa0 nil)
    (TCOA formal-const-decl "nnreal" WCV_tcpa0 nil)
    (vertical_WCV_interval_def formula-decl nil vertical_WCV nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (WCV_tcpa0 const-decl "bool" WCV_tcpa0 nil)
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (WCV_tcpa0_interval const-decl
     "[# entry: Lookahead[B, T], exit: Lookahead[B, T] #]" WCV_tcpa0
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (WCV_tcpa0_interval_def-1 nil 3592566688
   ("" (skeep)
    (("" (skeep)
      (("" (skoletin 1)
        (("" (skoletin 1)
          (("" (label "final" 1)
            (("" (expand "WCV_tcpa0_interval" :assert? none)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (replaces -2)
                          (("1" (replaces -2)
                            (("1" (replaces -2)
                              (("1"
                                (assert)
                                (("1"
                                  (invoke (case "%1") (! 1 2))
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replaces 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "WCV_tcpa0")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma
                                             "vertical_WCV_interval_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst - "t")
                                                  (("2"
                                                    (expand
                                                     "vertical_WCV_at")
                                                    (("2"
                                                      (rewrite
                                                       "vz_distr_add")
                                                      (("2"
                                                        (rewrite
                                                         "vz_scal")
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (invoke (name "tz" "%1") (! -1 1))
                              (("1"
                                (replace -1)
                                (("1"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "t = tz")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "WCV_tcpa0" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma
                                             "vertical_WCV_tcpa0_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst - "t")
                                                  (("2"
                                                    (expand
                                                     "vertical_WCV_at")
                                                    (("2"
                                                      (rewrite
                                                       "vz_distr_add")
                                                      (("2"
                                                        (rewrite
                                                         "vz_scal")
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "WCV_tcpa0" 1)
                                      (("2"
                                        (rewrite "vect2_add")
                                        (("2"
                                          (rewrite "vect2_scal")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "vertical_WCV_interval_def")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "t")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "vertical_WCV_at")
                                                        (("2"
                                                          (rewrite
                                                           "vz_distr_add")
                                                          (("2"
                                                            (rewrite
                                                             "vz_scal")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (replaces -2)
                                        (("1"
                                          (replaces -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (invoke
                                               (case "%1")
                                               (! 3 2))
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (replaces 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "WCV_tcpa0")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "vertical_WCV_interval_def")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "t")
                                                              (("2"
                                                                (expand
                                                                 "vertical_WCV_at")
                                                                (("2"
                                                                  (rewrite
                                                                   "vz_distr_add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "vz_scal")
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (rewrite
                                                                             "vect2_add")
                                                                            (("2"
                                                                              (rewrite
                                                                               "vect2_scal")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (name
                                       "vni"
                                       "vertical_WCV_interval(B, T, s`z, v`z)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (name
                                           "hni"
                                           "horizontal_WCV_tcpa0_interval(vni`exit - vni`entry,
                                       vect2(s) + vni`entry * vect2(v),
                                       vect2(v))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (replaces -3)
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "WCV_tcpa0")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "vertical_WCV_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "t")
                                                                      (("1"
                                                                        (expand
                                                                         "vertical_WCV_at")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vz_distr_add")
                                                                          (("1"
                                                                            (rewrite
                                                                             "vz_scal")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "horizontal_WCV_tcpa0_interval_def")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "t-vni`entry")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "vect2(s) + vni`entry * vect2(v) +
                      (t - vni`entry) * vect2(v) = vect2(s + t * v)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "WCV_tcpa0")
                                                          (("2"
                                                            (split +)
                                                            (("1"
                                                              (lemma
                                                               "vertical_WCV_interval_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "t")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "horizontal_WCV_tcpa0_interval_def")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "t-vni`entry")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "vect2(s) + vni`entry * vect2(v) +
                      (t - vni`entry) * vect2(v) = vect2(s + t * v)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "vertical_WCV_interval_def")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "t")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "vertical_WCV_tcpa0")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vect2_scal formula-decl nil vect_3D_2D "vectors/")
    (vect2_add formula-decl nil vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (vz_distr_add formula-decl nil vectors_3D "vectors/")
    (vz_scal formula-decl nil vectors_3D "vectors/")
    (Vector type-eq-decl nil vectors_3D "vectors/")
    (+ const-decl "Vector" vectors_3D "vectors/")
    (* const-decl "Vector" vectors_3D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/"))
   shostak))
 (WCV_tcpa0_detection_TCC1 0
  (WCV_tcpa0_detection_TCC1-1 nil 3592570708 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (WCV_tcpa0_detection_def 0
  (WCV_tcpa0_detection_def-1 nil 3592570730
   ("" (skeep)
    (("" (expand "WCV_tcpa0_detection")
      (("" (lift-if)
        (("" (split +)
          (("1" (flatten) (("1" (ground) (("1" (inst?) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (split +)
              (("1" (flatten)
                (("1" (assert) (("1" (skosimp*) nil nil)) nil)) nil)
               ("2" (flatten)
                (("2" (ground)
                  (("1" (inst + "WCV_tcpa0_interval(B, T, s, v)`entry")
                    (("1" (lemma "WCV_tcpa0_interval_def")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (lemma "WCV_tcpa0_interval_def")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst - "t!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((WCV_tcpa0_detection const-decl "bool" WCV_tcpa0 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (WCV_tcpa0_interval_def formula-decl nil WCV_tcpa0 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (WCV_tcpa0_interval const-decl
     "[# entry: Lookahead[B, T], exit: Lookahead[B, T] #]" WCV_tcpa0
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (< const-decl "bool" reals nil))
   shostak)))

