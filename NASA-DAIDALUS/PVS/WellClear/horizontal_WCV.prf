(horizontal_WCV
 (horizontal_WCV_symm 0
  (horizontal_WCV_symm-1 nil 3606219153
   ("" (skeep)
    (("" (expand "horizontal_WCV")
      (("" (rewrite "sqv_neg")
        (("" (lemma "tcpa_symm")
          (("" (expand "symmetric?" -1)
            (("" (insteep)
              (("" (replaces -1 :dir rl)
                ((""
                  (case-replace
                   "-s + tcpa(s, v) * -v = -(s+tcpa(s,v)*v)")
                  (("1" (rewrite "sqv_neg")
                    (("1" (hide -1)
                      (("1" (iff)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "symmetric?")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replaces -4)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "symmetric?")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (grind :exclude "tcpa") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (tcpa_symm formula-decl nil timevars nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (- const-decl "Vector" vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (tcpa const-decl "real" timevars nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_neg formula-decl nil vectors_2D "vectors/")
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (symmetric? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (sqv_neg formula-decl nil vectors_2D "vectors/"))
   nil))
 (horizontal_WCV_incl 0
  (horizontal_WCV_incl-2 nil 3606293369
   ("" (skeep :preds? t)
    (("" (expand "timevar?")
      (("" (expand "pre_timevar?")
        (("" (insteep*)
          (("" (expand "horizontal_WCV")
            (("" (flatten)
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (case "s*v=0")
                      (("1" (case-replace "tcpa(s,v) = 0")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (expand "tcpa")
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "horizontal_tca")
                                    (("1"
                                      (replaces -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "<=" -4)
                        (("2" (insteep)
                          (("2" (splash -4)
                            (("1" (assert) nil nil)
                             ("2" (expand "pre_le?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "real" vectors_2D "vectors/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (horizontal_tca const-decl "real" definitions "ACCoRD/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (tcpa const-decl "real" timevars nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (TimeVar type-eq-decl nil timevars nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (<= const-decl "bool" horizontal_WCV nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (pre_timevar? const-decl "bool" horizontal_WCV nil))
   nil)
  (horizontal_WCV_incl-1 nil 3606292959
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (horizontal_interval_correct_is_sound 0
  (horizontal_interval_correct_is_sound-1 nil 3625241526
   ("" (skeep)
    (("" (expand "horizontal_interval_sound?")
      (("" (skeep)
        (("" (expand "nonempty?")
          (("" (expand "horizontal_interval_correct?")
            (("" (split)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (insteep) (("1" (ground) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (skeep)
                  (("2" (insteep) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV
     nil))
   nil))
 (horizontal_decreasing 0
  (horizontal_decreasing-1 nil 3625241506
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (splash 1)
          (("1" (typepred "hi")
            (("1" (expand "horizontal_interval_sound?")
              (("1" (inst-cp -1 "Tt" "s+t*v" "v")
                (("1" (inst -1 "T" "s" "v")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (hide -2 -4)
                        (("1" (name "at" "interval`entry-t")
                          (("1" (inst -3 "at")
                            (("1" (inst -2 "interval`entry")
                              (("1"
                                (replaces (-7 -8) :dir rl)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide-all-but (-1 -2 2))
                                      (("1"
                                        (case-replace
                                         "s + interval`entry * v = s + t * v + at * v")
                                        (("1"
                                          (hide-all-but (-1 1))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "hi")
            (("2" (expand "horizontal_interval_sound?")
              (("2" (inst-cp -1 "Tt" "s+t*v" "v")
                (("2" (assert)
                  (("2" (name "at" "interval`entry-t")
                    (("2" (inst 1 "at")
                      (("1" (insteep -2)
                        (("1" (assert)
                          (("1" (inst -2 "interval`entry")
                            (("1" (replaces (-5 -6) :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide-all-but (-1 -3 1))
                                    (("1"
                                      (case-replace
                                       "s + interval`entry * v = s + t * v + at * v")
                                      (("1"
                                        (hide -2 2)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Tt skolem-const-decl "{Tt: posreal | Tt >= T - t}" horizontal_WCV
     nil)
    (t skolem-const-decl "Lookahead[0, T]" horizontal_WCV nil)
    (T skolem-const-decl "posreal" horizontal_WCV nil)
    (at skolem-const-decl "real" horizontal_WCV nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (at skolem-const-decl "real" horizontal_WCV nil))
   nil))
 (horizontal_shift_TCC1 0
  (horizontal_shift_TCC1-1 nil 3625406863 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (/= const-decl "boolean" notequal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (* const-decl "real" vectors_2D "vectors/"))
   nil))
 (horizontal_shift 0
  (horizontal_shift-1 nil 3625406865
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (typepred "hi")
          (("" (expand "horizontal_interval_sound?")
            (("" (label "idef" -6)
              (("" (label "itdef" -5)
                (("" (inst-cp - "t2-t1" "s+t1*v" "v")
                  (("1" (inst - "T" "s" "v")
                    (("1" (assert)
                      (("1" (inst-cp - "hi(T, s, v)`entry")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -2)
                              (("1"
                                (inst-cp -3 "interval_t`entry")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst-cp
                                         -
                                         "interval_t`entry+t1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "s + (interval_t`entry + t1) * v = s + t1 * v + interval_t`entry * v")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         "idef"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             "itdef"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (name
                                                               "tstar"
                                                               "interval`entry - t1")
                                                              (("1"
                                                                (case
                                                                 "NOT (0<=tstar AND tstar<=t2-t1)")
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -7
                                                                     "tstar")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "tstar"
                                                                           +)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-6
                                                                              3))
                                                                            (("1"
                                                                              (grind
                                                                               :exclude
                                                                               "horizontal_WCV")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T skolem-const-decl "posreal" horizontal_WCV nil)
    (t2 skolem-const-decl "Lookahead[0, T]" horizontal_WCV nil)
    (t1 skolem-const-decl "Lookahead[0, T]" horizontal_WCV nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (tstar skolem-const-decl "real" horizontal_WCV nil))
   shostak))
 (horizontal_correct_shift_TCC1 0
  (horizontal_correct_shift_TCC1-1 nil 3626520527
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (/= const-decl "boolean" notequal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/"))
   nil))
 (horizontal_correct_shift 0
  (horizontal_correct_shift-1 nil 3626520529
   ("" (skeep)
    (("" (lemma "horizontal_interval_correct_is_sound[TTHR,DTHR]")
      (("" (inst?)
        (("" (inst - "hi")
          (("" (assert)
            (("" (flatten)
              (("" (expand "max")
                (("" (lift-if)
                  (("" (assert)
                    (("" (split +)
                      (("1" (flatten)
                        (("1" (typepred "hi")
                          (("1" (expand "horizontal_interval_correct?")
                            (("1" (inst - "t2-t1" "s+t1*v" "v" "0")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "hi")
                                  (("1"
                                    (expand
                                     "horizontal_interval_correct?")
                                    (("1"
                                      (inst - "T" "s" "v" "t1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nonempty?")
                                          (("1"
                                            (typepred "hi")
                                            (("1"
                                              (expand
                                               "horizontal_interval_correct?")
                                              (("1"
                                                (inst
                                                 -
                                                 "t2-t1"
                                                 "s+t1*v"
                                                 "v"
                                                 "hi(t2 - t1, s + t1 * v, v)`entry")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "hi")
                                                    (("1"
                                                      (expand
                                                       "horizontal_interval_correct?")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "T"
                                                         "s"
                                                         "v"
                                                         "t1 + hi(t2 - t1, s + t1 * v, v)`entry")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind
                                                               :exclude
                                                               "horizontal_WCV")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "horizontal_shift")
                          (("2" (insteep -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_interval_correct_is_sound formula-decl nil
     horizontal_WCV nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (horizontal_shift formula-decl nil horizontal_WCV nil)
    (horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (horizontal_correct_shift2 0
  (horizontal_correct_shift2-2 nil 3626544956
   ("" (skeep)
    (("" (lemma "horizontal_interval_correct_is_sound[TTHR,DTHR]")
      (("" (inst?)
        (("" (inst - "hi")
          (("" (assert)
            (("" (flatten)
              (("" (lift-if)
                (("" (ground)
                  (("1" (typepred "hi")
                    (("1" (expand "horizontal_interval_correct?")
                      (("1" (inst - "t2-t1" "s+t1*v" "v" "0")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "horizontal_shift")
                    (("2" (insteep -1)
                      (("2" (assert)
                        (("2" (typepred "hi")
                          (("2" (expand "horizontal_interval_correct?")
                            (("2"
                              (inst -1 "t2-t1" "s+t1*v" "v"
                               "hi(t2 - t1, s + t1 * v, v)`entry")
                              (("2"
                                (expand "nonempty?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "hi")
                                    (("2"
                                      (expand
                                       "horizontal_interval_correct?")
                                      (("2"
                                        (inst
                                         -
                                         "T"
                                         "s"
                                         "v"
                                         "hi(T,s,v)`entry")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (typepred "hi")
                                                (("2"
                                                  (expand
                                                   "horizontal_interval_correct?")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "T"
                                                     "s"
                                                     "v"
                                                     "t1+hi(t2 - t1, s + t1 * v, v)`entry")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "hi")
                                                                  (("1"
                                                                    (expand
                                                                     "horizontal_interval_correct?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "T"
                                                                       "s"
                                                                       "v"
                                                                       "t1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-2
                                                                  1))
                                                                (("2"
                                                                  (grind
                                                                   :exclude
                                                                   "horizontal_WCV")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_interval_correct_is_sound formula-decl nil
     horizontal_WCV nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV nil)
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (horizontal_interval_sound? const-decl "bool" horizontal_WCV nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (horizontal_shift formula-decl nil horizontal_WCV nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (horizontal_correct_shift2-1 nil 3626544946 ("" (postpone) nil nil)
   nil shostak))
 (horizontal_correct_exit_shift 0
  (horizontal_correct_exit_shift-1 nil 3626601652
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (case "NOT interval_t`exit <= t2-t1")
                (("1" (assert) nil nil)
                 ("2" (typepred "hi")
                  (("2" (expand "horizontal_interval_correct?")
                    (("2" (inst - "t2-t1" "s+t1*v" "v" "t2-t1")
                      (("1" (flatten)
                        (("1" (hide -2)
                          (("1" (split)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (grind :exclude "horizontal_WCV")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (case "interval_t`exit < interval`exit-t1")
                (("1" (hide 2)
                  (("1" (typepred "hi")
                    (("1" (expand "horizontal_interval_correct?")
                      (("1"
                        (inst - "t2-t1" "s+t1*v" "v"
                         "interval`exit-t1")
                        (("1" (assert)
                          (("1" (typepred "hi")
                            (("1"
                              (expand "horizontal_interval_correct?")
                              (("1"
                                (inst - "T" "s" "v" "interval`exit")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (split -)
                                      (("1"
                                        (hide-all-but (-1 1))
                                        (("1"
                                          (grind
                                           :exclude
                                           "horizontal_WCV")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nonempty?")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (expand "nonempty?")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "NOT interval`exit > t2")
                            (("1" (assert) nil nil)
                             ("2" (hide 1)
                              (("2"
                                (typepred "hi")
                                (("2"
                                  (expand
                                   "horizontal_interval_correct?")
                                  (("2"
                                    (inst - "T" "s" "v" "t2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "hi")
                                        (("2"
                                          (expand
                                           "horizontal_interval_correct?")
                                          (("2"
                                            (inst
                                             -
                                             "t2-t1"
                                             "s+t1*v"
                                             "v"
                                             "interval_t`entry")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "hi")
                                                        (("2"
                                                          (expand
                                                           "horizontal_interval_correct?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "T"
                                                             "s"
                                                             "v"
                                                             "t1 + interval_t`entry")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("2"
                                                                  (grind
                                                                   :exclude
                                                                   "horizontal_WCV")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "NOT interval_t`exit > interval`exit-t1")
                    (("1" (assert) nil nil)
                     ("2" (hide (1 3))
                      (("2" (typepred "hi")
                        (("2" (expand "horizontal_interval_correct?")
                          (("2"
                            (inst - "T" "s" "v" "interval_t`exit + t1")
                            (("2" (assert)
                              (("2"
                                (typepred "hi")
                                (("2"
                                  (expand
                                   "horizontal_interval_correct?")
                                  (("2"
                                    (inst
                                     -
                                     "t2-t1"
                                     "s+t1*v"
                                     "v"
                                     "interval_t`exit")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (hide-all-but (-1 1))
                                              (("1"
                                                (grind
                                                 :exclude
                                                 "horizontal_WCV")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nonempty?")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonempty? const-decl "bool" EntryExit_interval nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval skolem-const-decl "EntryExit[0, T]" horizontal_WCV nil)
    (< const-decl "bool" reals nil)
    (T skolem-const-decl "posreal" horizontal_WCV nil)
    (t2 skolem-const-decl "Lookahead[0, T]" horizontal_WCV nil)
    (t1 skolem-const-decl "Lookahead[0, T]" horizontal_WCV nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

