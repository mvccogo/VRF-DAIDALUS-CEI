(WCV_inclusion
 (tcpa_le_tau 0
  (tcpa_le_tau-1 nil 3606467702
   ("" (expand "<=")
    (("" (skeep)
      (("" (expand "pre_le?")
        (("" (flatten)
          (("" (expand "tcpa")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "safe_tau")
                      (("1" (lemma "tau_tca")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_zero_right formula-decl nil vectors_2D "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (tau_tca formula-decl nil timevars nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (tcpa const-decl "real" timevars nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (<= const-decl "bool" horizontal_WCV nil))
   shostak))
 (taumod_le_tcpa 0
  (taumod_le_tcpa-1 nil 3606468036
   ("" (expand "<=")
    (("" (skeep)
      (("" (lemma "pre_Delta_ge_0")
        (("" (insteep)
          (("" (assert)
            (("" (expand "taumod")
              (("" (expand "tcpa")
                (("" (expand "pre_le?")
                  (("" (flatten)
                    (("" (assert)
                      (("" (lift-if 1)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (lemma "tau_mod_tca")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "tau_mod_eq")
                                    (("1"
                                      (insteep)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replaces -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (tau_mod_tca formula-decl nil tcas_tau "TCASII/")
    (tau_mod_eq formula-decl nil tcas_tau "TCASII/")
    (TRUE const-decl "bool" booleans nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (tcpa const-decl "real" timevars nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil)
    (tcpa_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (pre_Delta_ge_0 formula-decl nil horizontal_WCV_tep nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TTHR formal-const-decl "nnreal" WCV_inclusion nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" WCV_inclusion nil)
    (<= const-decl "bool" horizontal_WCV nil))
   shostak))
 (tep_le_taumod 0
  (tep_le_taumod-1 nil 3606468361
   ("" (expand "<=")
    (("" (skeep)
      (("" (lemma "pre_Delta_ge_0")
        (("" (insteep)
          (("" (assert)
            (("" (expand "taumod")
              (("" (expand "tep")
                (("" (expand "pre_le?")
                  (("" (flatten)
                    (("" (assert)
                      (("" (lemma "tau_mod_Theta_D[DTHR]")
                        (("" (inst?)
                          (("" (assert)
                            (("" (lemma "tau_mod_eq")
                              ((""
                                (inst?)
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (replaces -2)
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (tcpa_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (tau_mod_eq formula-decl nil tcas_tau "TCASII/")
    (TRUE const-decl "bool" booleans nil)
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (tau_mod_Theta_D formula-decl nil tcas_tau "TCASII/")
    (tep const-decl "real" horizontal_WCV_tep nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tep_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil)
    (pre_Delta_ge_0 formula-decl nil horizontal_WCV_tep nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TTHR formal-const-decl "nnreal" WCV_inclusion nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" WCV_inclusion nil)
    (<= const-decl "bool" horizontal_WCV nil))
   nil))
 (WCV_taumod_inclusion 0
  (WCV_taumod_inclusion-1 nil 3625247650
   ("" (rewrite "WCV_inclusion")
    (("" (lemma "tep_le_taumod") (("" (propax) nil nil)) nil)) nil)
   ((tep_le_taumod formula-decl nil WCV_inclusion nil)
    (ZTHR formal-const-decl "posreal" WCV_inclusion nil)
    (DTHR formal-const-decl "posreal" WCV_inclusion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_inclusion nil)
    (TTHR formal-const-decl "nnreal" WCV_inclusion nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (pre_timevar? const-decl "bool" horizontal_WCV nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (WCV_inclusion formula-decl nil WCV nil)
    (tep_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil))
   nil))
 (WCV_tcpa_inclusion 0
  (WCV_tcpa_inclusion-1 nil 3625247761
   ("" (splash)
    (("1" (lemma "WCV_taumod_inclusion")
      (("1" (lemma "WCV_inclusion_trans")
        (("1" (inst -1 "tcpa" "taumod" "tep") (("1" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "WCV_inclusion")
      (("2" (lemma "taumod_le_tcpa") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((pre_timevar? const-decl "bool" horizontal_WCV nil)
    (WCV_inclusion formula-decl nil WCV nil)
    (taumod_le_tcpa formula-decl nil WCV_inclusion nil)
    (WCV_taumod_inclusion formula-decl nil WCV_inclusion nil)
    (WCV_inclusion_trans formula-decl nil WCV nil)
    (tep_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (tcpa const-decl "real" timevars nil)
    (WCV_inclusion? const-decl "bool" WCV nil)
    (ZTHR formal-const-decl "posreal" WCV_inclusion nil)
    (DTHR formal-const-decl "posreal" WCV_inclusion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_inclusion nil)
    (TTHR formal-const-decl "nnreal" WCV_inclusion nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil)
    (tcpa_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (WCV_tau_inclusion 0
  (WCV_tau_inclusion-1 nil 3625247984
   ("" (splash)
    (("1" (lemma "WCV_taumod_inclusion")
      (("1" (lemma "WCV_tcpa_inclusion")
        (("1" (flatten)
          (("1" (lemma "WCV_inclusion_trans")
            (("1" (inst -1 "safe_tau" "tcpa" "tep")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "WCV_tcpa_inclusion")
      (("2" (flatten)
        (("2" (lemma "WCV_inclusion_trans")
          (("2" (inst -1 "safe_tau" "tcpa" "taumod")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (rewrite "WCV_inclusion")
      (("3" (lemma "tcpa_le_tau") (("3" (propax) nil nil)) nil)) nil))
    nil)
   ((pre_timevar? const-decl "bool" horizontal_WCV nil)
    (WCV_inclusion formula-decl nil WCV nil)
    (tcpa_le_tau formula-decl nil WCV_inclusion nil)
    (WCV_taumod_inclusion formula-decl nil WCV_inclusion nil)
    (WCV_inclusion_trans formula-decl nil WCV nil)
    (WCV_tcpa_inclusion formula-decl nil WCV_inclusion nil)
    (tep_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (tcpa const-decl "real" timevars nil)
    (safe_tau const-decl "real" horizontal_WCV_tau nil)
    (WCV_inclusion? const-decl "bool" WCV nil)
    (ZTHR formal-const-decl "posreal" WCV_inclusion nil)
    (DTHR formal-const-decl "posreal" WCV_inclusion nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" WCV_inclusion nil)
    (TTHR formal-const-decl "nnreal" WCV_inclusion nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (tcpa_timevar name-judgement "(pre_timevar?)" WCV_inclusion nil)
    (safe_tau_pre_timevar name-judgement "(pre_timevar?)" WCV_inclusion
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)))

