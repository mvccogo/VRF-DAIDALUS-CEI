% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

horizontal_WCV_tau[TAU:nnreal,DTHR:posreal]  : THEORY 

% TAU is the tau threshold
% DTHR is the distance threshold

BEGIN

  IMPORTING TCASII@tcas_tau[DTHR],
            horizontal_WCV[TAU,DTHR],
	    vectors@vectors

  s,v : VAR Vect2  
  T   : VAR posreal

  % Not well clear if either inside DTHR or the dist at tca is at most HMD and
  % the time to TCA is at most TTHR

  safe_tau(s,v) : real =
    IF s*v < 0 THEN tau(s,v)
    ELSE -1
    ENDIF

  safe_tau_timevar : JUDGEMENT
    safe_tau HAS_TYPE TimeVar

  safe_tau_pre_timevar : JUDGEMENT
    safe_tau HAS_TYPE (pre_timevar?)

  safe_tau_symm : LEMMA
    symmetric?(safe_tau)

  horizontal_WCV_tau(s,v): MACRO bool =
    horizontal_WCV(safe_tau)(s,v)

  horizontal_WCV_tau_symm : LEMMA
    horizontal_WCV_tau(s,v) = horizontal_WCV_tau(-s,-v)

  horizontal_WCV_tau_rew : LEMMA
    horizontal_WCV_tau(s,v) IFF
      (sqv(s) <= sq(DTHR) OR
       (s*v < 0 AND 
        sqv(s+horizontal_tca(s,v)*v)<=sq(DTHR) AND 
        tau(s,v)<=TAU))

  horizontal_WCV_tau_interval(T,s,v):[# entry:Lookahead[0,T],exit:Lookahead[0,T] #] =
    LET a=sqv(v),
        b=2*(s*v)+TAU*sqv(v),
    	c=sqv(s)+TAU*(s*v) IN 
    IF a = 0 AND sqv(s)<=sq(DTHR) THEN (# entry:=0,exit:=T #) 
    ELSIF sqv(s)<=sq(DTHR) THEN (# entry :=0 ,exit:=min(T,Theta_D[DTHR](s,v,1))#)
    ELSIF s*v>=0 OR Delta[DTHR](s,v)<0 THEN (#entry:=T,exit:=0#)
    ELSE
      LET tauin = (IF discr(a,b,c)>=0 THEN max(0,root(a,b,c,-1)) ELSE T ENDIF),
      	  tauout = (IF discr(a,b,c)>=0 THEN min(T,root(a,b,c,1)) ELSE 0 ENDIF),
	  Din = max(0,Theta_D[DTHR](s,v,-1)),
	  Dout = min(T,Theta_D[DTHR](s,v,1))
      IN
        IF tauin>tauout AND Din>Dout THEN (#entry:=T,exit:=0#)
	ELSIF tauin>tauout THEN (#entry:=Din,exit:=Dout#)
	ELSIF Din>Dout THEN (#entry:=tauin,exit:=tauout#)
	ELSE (#entry:=min(tauin,Din),exit:=Dout#)
	ENDIF
    ENDIF

  horizontal_WCV_tau_interval_sound: LEMMA
    horizontal_interval_sound?(safe_tau)(horizontal_WCV_tau_interval)

END horizontal_WCV_tau

