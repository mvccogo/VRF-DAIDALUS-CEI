% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

alertor : THEORY

  BEGIN

  IMPORTING los_and_cd

  Region: TYPE = {NONE, FAR, MID, NEAR, RECOVERY, UNKNOWN}

  better_region(r1,r2:Region): Region = 
    IF r1 = NONE OR r2 = NONE THEN NONE
    ELSIF r1 = RECOVERY OR r2 = RECOVERY THEN RECOVERY
    ELSIF r1 = FAR OR r2 = FAR THEN FAR
    ELSIF r1 = MID OR r2 = MID THEN MID
    ELSIF r1 = NEAR OR r2 = NEAR THEN NEAR 
    ELSE UNKNOWN
    ENDIF

  Spread : TYPE = [real, real]
 
  WCVTable : TYPE = [# DTHR: posreal,
  	     	       ZTHR: posreal,
		       TTHR: nnreal,
		       TCOA: nnreal #]

  AlertTable : TYPE = [# wcv: WCVTable, 
  	       	      	 alerting_time: nnreal,
			 early_alerting_time: nnreal, 
			 region: Region,
			 spread_trk: Spread, 
			 spread_gs: Spread,
  			 spread_vs: Spread,
			 spread_alt: Spread   #]

  Alertor : TYPE  = {al: [nat, list[AlertTable]] | (null?[AlertTable](al`2) AND al`1=0) OR (al`1>0 AND al`1 <=length(al`2))} 
  
  table_to_ConfDet(wcvtable: WCVTable): ConfDetector = 
    wcv_taumod_cd(wcvtable`TTHR, wcvtable`TCOA, wcvtable`DTHR, wcvtable`ZTHR)

  END alertor
