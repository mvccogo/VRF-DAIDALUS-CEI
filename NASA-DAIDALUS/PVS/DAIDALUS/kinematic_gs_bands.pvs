% DAIDALUS (Detect and Avoid Alerting Logic for Unmanned Systems)
%
% Notices:
% Copyright 2016 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration. No
% copyright is claimed in the United States under Title 17,
% U.S. Code. All Other Rights Reserved.
% Disclaimers
% No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
% WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
% INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
% WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
% INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
% FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
% THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
% CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
% OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
% OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
% FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
% REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
% AND DISTRIBUTES IT "AS IS."
% Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
% AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
% SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
% THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
% EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
% PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
% SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
% STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
% PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
% REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
% TERMINATION OF THIS AGREEMENT.

kinematic_gs_bands: THEORY
BEGIN

    IMPORTING aviation@kinematics_gs_accel,
    	      combine_bands,
	      ACCoRD@cd3d, 
 	      structures@Maybe[real]


    %% --- variables

    bank, speed, radius, omega: VAR posreal
    sbank, alpha, beta: VAR real
    t, tt: VAR posreal
    so, vo: VAR Vect3
    AL: VAR AircraftList
    % We only check criteria against most urgent aircraft
    most_urgent: VAR [[Vect3,Vect3,AircraftList]->int]
    % This should have signature most_urgent(so,vo,AL)
    UseHCrit,UseVCrit,Usedir,UseLOS2: VAR bool
    epsH,epsV,dir: VAR Sign
    B,T,B2,T2:VAR nnreal
    step: VAR posreal
    mings,maxgs:VAR posreal
    a : VAR posreal
    


    % this uses gsAccel %

    % omega is the max turn rate - note that here it is
    % positive, while in gsAccel, it is real. It is negated
    % here when it searches in then. 

    % These algorithms have to be for generic los and detection definitions:

    LOS,LOS2: VAR [[Vect3,Vect3,Vect3,Vect3]->bool]

    CD,CD2: VAR [[nnreal,nnreal,Vect3,Vect3,Vect3,Vect3]->bool]

    % kinematic gs bands:

    %round(r:real): {j:int | r-1/2<j AND j<=r+1/2} =
    %  floor(r+1/2)

    % The next function computes the bands relative to gs(vo). 

    kinematic_gs_bands_init(LOS,CD,LOS2,CD2,UseLOS2,so,(vo|sqv(vect2(vo))>0),AL,(most_urgent|most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL)),epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)
        (B,T,B2,T2:nnreal,step:posreal):
       	      list[RealBand] =
      LET MaxDown:nat = max(ceiling((gs(vo)-mings)/step),0),
      	  MaxUp  :nat = max(ceiling((maxgs-gs(vo))/step),0),
	  Downfun=(LAMBDA (t:nnreal): gsAccel(so,vo,t,-a)),
          Upfun  =(LAMBDA (t:nnreal): gsAccel(so,vo,t,a)),
	  timestep = step/a,	 						  
	  GsInt: list[IntBand] = % These are not yet translated by gs(vo)
	       kinematic_bands_combine(LOS,CD,LOS2,CD2,UseLOS2,B,T,B2,T2,so,vo,Downfun,Upfun,MaxDown,MaxUp,timestep,timestep,
	       AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit),
	  UnAdjB: list[RealBand] = scal(step,GsInt),
          InitB : list[RealBand] = add(gs(vo),UnAdjB)
      IN InitB

    kinematic_gs_bands_init_increasing: LEMMA sqv(vect2(vo))>0 AND most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL) AND detector?(LOS)(CD) AND detector?(LOS2)(CD2) AND gsAccel(so,vo,0,-a)=(so,vo) AND
      gsAccel(so,vo,0,a)=(so,vo) IMPLIES
      LET ktb = kinematic_gs_bands_init(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)(B,T,B2,T2,step)
      IN strictly_increasing_real?(ktb)

    kinematic_gs_bands(LOS,(CD|detector?(LOS)(CD)),LOS2,(CD2|detector?(LOS2)(CD2)),UseLOS2,so,(vo|sqv(vect2(vo))>0),AL,(most_urgent|most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL)),epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)
        (B,T,B2,T2:nnreal,step:posreal): list[RealBand] =
	  LET kvb = kinematic_gs_bands_init(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)(B,T,B2,T2,step)
	  IN intersect(kvb,mings,maxgs)

    kinematic_gs_bands_def: LEMMA sqv(vect2(vo))>0 AND most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL) AND detector?(LOS)(CD) AND detector?(LOS2)(CD2) AND gsAccel(so,vo,0,-a)=(so,vo) AND
      gsAccel(so,vo,0,a)=(so,vo) AND mings<=gs(vo) AND gs(vo)<=maxgs IMPLIES
      LET ktb = kinematic_gs_bands(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)(B,T,B2,T2,step)
      IN FORALL (j:nat):
        LET newgs = gs(vo)+dir*j*step IN
	  mings<=newgs AND newgs<=maxgs AND
	  conflict_step(LOS,LOS2,UseLOS2,B,T,B2,T2,so,vo,LAMBDA (tt:nnreal): gsAccel(so,vo,tt,dir*a),step/a,AL,most_urgent,
		epsH,epsV,UseHCrit,UseVCrit)(j)
          IMPLIES
	  (NOT EXISTS (i:below(length(ktb))): in?(nth(ktb,i),newgs))



  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%% Do bands exist? %%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  any_kinematic_gs_red(LOS,(CD|detector?(LOS)(CD)),LOS2,(CD2|detector?(LOS2)(CD2)),UseLOS2,so,(vo|sqv(vect2(vo))>0),AL,
      (most_urgent|most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL)),epsH,epsV,UseHCrit,UseVCrit,a,dir,Usedir,mings,maxgs)
        (B,T,B2,T2:nnreal,step:posreal):
       	      bool =
      LET MaxDown:nat = max(ceiling((gs(vo)-mings)/step),0),
      	  MaxUp  :nat = max(ceiling((maxgs-gs(vo))/step),0),
	  Downfun=(LAMBDA (t:nnreal): gsAccel(so,vo,t,-a)),
          Upfun  =(LAMBDA (t:nnreal): gsAccel(so,vo,t,a)),
	  isred: bool = % These are not yet translated by gs(vo)
	       any_red(LOS,CD,LOS2,CD2,UseLOS2,B,T,B2,T2,so,vo,Downfun,Upfun,MaxDown,MaxUp,step/a,step/a,
	       AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,dir,Usedir)
      IN isred

  any_kinematic_gs_red_def: LEMMA sqv(vect2(vo))>0 AND most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL) AND detector?(LOS)(CD) AND detector?(LOS2)(CD2) AND gsAccel(so,vo,0,-a)=(so,vo) AND
      gsAccel(so,vo,0,a)=(so,vo) IMPLIES
      LET ktb = kinematic_gs_bands_init(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)(B,T,B2,T2,step),
      	  rbe = any_kinematic_gs_red(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,
	    a,dir,Usedir,mings,maxgs)(B,T,B2,T2,step),
	  MaxDown:nat = max(ceiling((gs(vo)-mings)/step),0),
      	  MaxUp  :nat = max(ceiling((maxgs-gs(vo))/step),0),
	  Downfun=(LAMBDA (t:nnreal): gsAccel(so,vo,t,-a)),
          Upfun  =(LAMBDA (t:nnreal): gsAccel(so,vo,t,a)),
	  downred = (EXISTS (i:subrange(-MaxDown,0)): FORALL (j:below(length(ktb))):
		  	  NOT in?(nth(ktb,j),gs(vo)+i*step)),
          upred = (EXISTS (i:subrange(0,MaxUp)): FORALL (j:below(length(ktb))):
		  	  NOT in?(nth(ktb,j),gs(vo)+i*step))
    IN (dir=-1 AND Usedir IMPLIES (rbe IFF downred))
       AND
       (dir=1 AND Usedir IMPLIES (rbe IFF upred))
       AND
       ((NOT Usedir) IMPLIES (rbe IFF (downred OR upred)))




  all_kinematic_gs_red(LOS,(CD|detector?(LOS)(CD)),LOS2,(CD2|detector?(LOS2)(CD2)),UseLOS2,so,(vo|sqv(vect2(vo))>0),AL,
      (most_urgent|most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL)),epsH,epsV,UseHCrit,UseVCrit,a,dir,Usedir,mings,maxgs)
        (B,T,B2,T2:nnreal,step:posreal):
       	      bool =
      LET MaxDown:nat = max(ceiling((gs(vo)-mings)/step),0),
      	  MaxUp  :nat = max(ceiling((maxgs-gs(vo))/step),0),
	  Downfun=(LAMBDA (t:nnreal): gsAccel(so,vo,t,-a)),
          Upfun  =(LAMBDA (t:nnreal): gsAccel(so,vo,t,a)),
	  isred: bool = % These are not yet translated by gs(vo)
	       all_red(LOS,CD,LOS2,CD2,UseLOS2,B,T,B2,T2,so,vo,Downfun,Upfun,MaxDown,MaxUp,step/a,step/a,
	       AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,dir,Usedir)
      IN isred


  all_kinematic_gs_red_def: LEMMA sqv(vect2(vo))>0 AND most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL) AND detector?(LOS)(CD) AND detector?(LOS2)(CD2) AND gsAccel(so,vo,0,-a)=(so,vo) AND
      gsAccel(so,vo,0,a)=(so,vo) IMPLIES
      LET ktb = kinematic_gs_bands_init(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,
        a,mings,maxgs)(B,T,B2,T2,step),
      	  allred = all_kinematic_gs_red(LOS,CD,LOS2,CD2,UseLOS2,so,vo,AL,most_urgent,epsH,epsV,UseHCrit,UseVCrit,
	    a,dir,Usedir,mings,maxgs)(B,T,B2,T2,step),
	  downred = (length(ktb)>0 IMPLIES nth(ktb,0)`lb>gs(vo)),
          upred = (length(ktb)>0 IMPLIES nth(ktb,length(ktb)-1)`ub<gs(vo))
    IN (dir=-1 AND Usedir IMPLIES (allred IFF downred))
       AND
       (dir=1 AND Usedir IMPLIES (allred IFF upred))
       AND
       ((NOT Usedir) IMPLIES (allred IFF (downred AND upred)))

%%%%%%%%%%%%%%%%%%%%%%%%
%%% First green band %%%
%%%%%%%%%%%%%%%%%%%%%%%%

 kinematic_gs_first_green(LOS,(CD|detector?(LOS)(CD)),LOS2,(CD2|detector?(LOS2)(CD2)),UseLOS2,so,(vo|sqv(vect2(vo))>0),AL,(most_urgent|most_urgent(so,vo,AL)>=0 AND 
      most_urgent(so,vo,AL)<length(AL)),epsH,epsV,UseHCrit,UseVCrit,a,mings,maxgs)
        (B,T,B2,T2:nnreal,step:posreal)(dir): [int, real]  = 
       LET MaxDown:nat = max(ceiling((gs(vo)-mings)/step),0),
      	  MaxUp  :nat = max(ceiling((maxgs-gs(vo))/step),0),
	  Downfun=(LAMBDA (t:nnreal): gsAccel(so,vo,t,-a)),
          Upfun  =(LAMBDA (t:nnreal): gsAccel(so,vo,t,a)),
	  timestep = step/a,	
	  GreenInd = first_green_dir(LOS,CD,LOS2,CD2,UseLOS2,B,T,B2,T2,so,vo,
    Downfun,Upfun,MaxDown,MaxUp,timestep,timestep,AL,most_urgent,
      epsH,epsV,UseHCrit,UseVCrit,dir) IN
   IF GreenInd <= 0 THEN (GreenInd, 0)  
   ELSE (GreenInd, gs(vo) + dir*step*GreenInd)
   ENDIF

END kinematic_gs_bands
